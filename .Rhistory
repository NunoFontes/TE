feedTimes=min(max(ceiling(daysAhead/30),1),24)
} else if((output[[3]])[1]  %in% c("Quarterly","QUARTERLY")){
#feedTimes=min(max(ceiling(daysAhead/90),1),6)
feedTimes=min(max(ceiling(daysAhead/30),1),10)
} else if((output[[3]])[1]  %in% "Weekly"){
feedTimes=min(max(ceiling(daysAhead/7),1),12)
} else if((output[[3]])[1]  %in% c("Yearly","ANNUALLY")){
feedTimes=1
} else {feedTimes=1}
if(insert){
#database=odbcDriverConnect("DRIVER=SQL Server;SERVER=DB.TRADINGECONOMICS.COM;DATABASE=TE;UId=TEAnalyst;PWD=TEAnalyst!1")
#  database=connectTE()
#  query=paste("update forecastvariables set notes='",notes,"',lastupdate=getdate() where variables='",jason$variables[j],"'",sep="")
#  fromDB=sqlQuery(database, query)
#  odbcClose(database)
if(is.null(spec)){
#print(feedTimes)
for (k in 1:feedTimes){
a=pushToMongoDB((output[[2]])[1],object[[j]],mthd,(output[[3]])[1],idx=k,period=k)
}
}
else{
for (k in 1:length(spec)){
# print("spec")
# print(spec[k])
indx=paste(as.numeric(substr(spec[k],4,7))+(as.numeric(substr(spec[k],1,2))-1)/12,sep="")
# print("indx")
# print(indx)
# print("output[[2]]")
# print(output[[2]])
a=pushToMongoDB((output[[2]])[1],object[[j]],mthd,(output[[3]])[1],idx=indx,period=0)
}
}}
#print(round(object[[j]][indx],2))}
#print(j)
#print(method)
if (!silent) {#print(notes)
}
}
if (report)  {  cat(paste(" \n",Sys.time()," - ",ticker," (", tag,")"),append=TRUE) }
return (1)#object)
}
getForecastMongoDB("USURTOT")
variables[2]
models[2]
model[2]
getForecastMongoDB("USURTOT","Confidence")
model="confidence"
object=list()
SEASONAL=TRUE;
REVERTS_TO_MEAN_PERIODS=300
#isFreshMongoDB
#if (!isFresh(ticker)) {if (!silent){print("data is not fresh")} ;return (0)}
if (!isFreshMongoDB(ticker)) {if (!silent){print("data is not fresh")} ;return (0)}
#jason=getVariables(ticker,model);variables=jason$variables;model=jason$model
jason=getVariablesMongoDB(ticker,model)
jason
jason=getVariablesMongoDB(ticker,model)
if(is.na(jason)[1]) return(0)
#versions=loadVersionOutlookMongoDB(ticker)
variables=jason$Variables;model=jason$Model
#print(variables)
outputVanilla=getDataMongoDB(ticker,range=NULL,type="last",group="month")
j=1
if(is.na(variables[j])){#print("empty")
;next}
notes=list()
if(variables[j]=='delete'){next}
tickers=fromJSON(as.character(variables[j]))
if (is.null(tickers$x)){next}
give=paste(tickers$x[2:length(tickers$x)], collapse = '\',\'')
get=paste(tickers$x[1], collapse = '\',\'')
if (!silent){#print(get)
}
#JUMP OUT IF NO NEW INFORMATION WAS ADDED
#new=NA
#if (force=="false"){new=getInfo(get,give,model[j],!is.null(spec))}
#if (!is.na(new) && !new ){if(!silent){#print("No new Info, Forecast would be redundant")
#  ;next}}
if (!is.null(tickers$ar)){ar=as.numeric(tickers$ar)} else {ar=12}
if (!is.null(tickers$i)){i=as.numeric(tickers$i)} else {i=NA}
if (!is.null(range)){rang=range}else if(!is.null(tickers$range)){rang=tickers$range} else {rang=NULL}
if (!is.null(tickers$mean)){meanrev=mean(output[[1]])} else {meanrev=FALSE}
if (!is.null(tickers$upperlim)){upperlim=tickers$upperlim} else {upperlim=FALSE}
if (!is.null(tickers$lowerlim)){lowerlim=tickers$lowerlim} else {lowerlim=FALSE}
if (!is.null(tickers$trend)){trend=tickers$trend;if(trend>20){trend=20};if(trend< -10){trend=-10}} else {trend=FALSE}
if (!is.null(tickers$monthavg)){type="mean"} else {type="last";}
if (!is.null(tickers$yearend)){group="year"} else {group="month";}
if(group != "month" || type != "last" || !is.null(rang)){
output=getDataMongoDB(get,range=rang,type=type,group=group)
}else{output=outputVanilla}
#output=getData(get,range=rang,type=type,group=group)
if (!is.list(output)) {next}
func=paste("F(t) = ",output[[2]],"(t-1) + ",sep="")
notes$z[1]=func
if (!is.null(tickers$seasonal)){
if(class(try(do.call(stats::stl,list(output[[1]],s.window="periodic")),silent=T))=="try-error") {;SEASONAL=FALSE;next}
seasonal=zoo(stats::stl(output[[1]],s.window="periodic")$time.series[,1])
output[[1]]=zoo(stats::stl(output[[1]],s.window="periodic")$time.series[,2])
}
if(!is.null(tickers$outlier)) {output[[1]]=removeOutliers(output[[1]])}
if(length(unlist(tickers$x))==1){
object[[j]]=getUnivForecast(output,to=to,ar=ar,i=i)
#print(object[[j]])
}else{
#input=getData(give,range=rang,type=type,group=group)
input=getDataMongoDB(give,range=rang,type=type,group=group)
#print(input[[1]])
#the code will check if the inputs are longer than the output. If they are shorter they are removed from the model, if they are longer they are used to forecast, if they are the same length cetaris paribus is assumed (change to analyst's opinion in the future)
if(is.list(input)){#print("ticker was deleted/changed")
; next;}
if(length(input[[1]])<1){#print("ticker was deleted/changed")
; next;}
if(length(colnames(input[[1]]))>1)
{ for(i in colnames(input[[1]]))
{ if(end(zoo(trimNA(input[[1]][,i])))<end(output[[1]]))
{ func=paste(func,"[",i,"](0) + ",sep="")
input[[1]]=input[[1]][,!colnames(input[[1]]) %in% c(input[[2]][i])]
}else if(end(zoo(trimNA(input[[1]][,i])))==end(output[[1]]))
{ func=paste(func,i,"(t-1) + ",sep="")
}else { func=paste(func,i,"(t) + ",sep="")}
}
}else {if(end(zoo(trimNA(input[[1]][,1])))<end(output[[1]]))
{ func=paste(func,"[",input[[2]][1],"](0) + ",sep="")
input[[1]]=input[[1]][,!colnames(input[[1]]) %in% c(input[[2]][i])]
}else if(end(zoo(trimNA(input[[1]][,1])))==end(output[[1]]))
{ func=paste(func,input[[2]][1],"(t-1) + ",sep="")
}else { func=paste(func,input[[2]][1],"(t) + ",sep="")}
}
#The series to forecast has to be 'slower' & it has to be at least 1.5 years long & both series should overlap at least 1.5 years
if (!is.null(dim(input[[1]]))){if(dim(input[[1]])[2]>1) {compare=trimNA(input[[1]])[,1]}}else {compare=trimNA(input[[1]])}
if (end(zoo(trimNA(input[[1]])))>=end(output[[1]]) && length(merge.zoo(zoo(compare), zoo(trimNA(output[[1]])), all = FALSE)[,1])>18)
{
object[[j]]=multivForecast(input,output,to=to,analyst=analyst,ar=ar)
#### do nothing if conditions are not met
} else { if(!silent){#print("NOT ENOUGH DATA")
}
; next}
}
input=getDataMongoDB(give,range=rang,type=type,group=group)
input
is.list(input)
length(input[[1]])<1
ticker="USURTOT"
jason=getVariablesMongoDB(ticker,model)
jason=getVariablesMongoDB(ticker,model)
ticker
model
model="all"
jason=getVariablesMongoDB(ticker,model)
jason
variables=jason$Variables;model=jason$Model
variables
j=9
if(is.na(variables[j])){#print("empty")
;next}
notes=list()
if(variables[j]=='delete'){next}
tickers=fromJSON(as.character(variables[j]))
if (is.null(tickers$x)){next}
give=paste(tickers$x[2:length(tickers$x)], collapse = '\',\'')
get=paste(tickers$x[1], collapse = '\',\'')
if (!silent){#print(get)
}
#JUMP OUT IF NO NEW INFORMATION WAS ADDED
#new=NA
#if (force=="false"){new=getInfo(get,give,model[j],!is.null(spec))}
#if (!is.na(new) && !new ){if(!silent){#print("No new Info, Forecast would be redundant")
#  ;next}}
if (!is.null(tickers$ar)){ar=as.numeric(tickers$ar)} else {ar=12}
if (!is.null(tickers$i)){i=as.numeric(tickers$i)} else {i=NA}
if (!is.null(range)){rang=range}else if(!is.null(tickers$range)){rang=tickers$range} else {rang=NULL}
if (!is.null(tickers$mean)){meanrev=mean(output[[1]])} else {meanrev=FALSE}
if (!is.null(tickers$upperlim)){upperlim=tickers$upperlim} else {upperlim=FALSE}
if (!is.null(tickers$lowerlim)){lowerlim=tickers$lowerlim} else {lowerlim=FALSE}
if (!is.null(tickers$trend)){trend=tickers$trend;if(trend>20){trend=20};if(trend< -10){trend=-10}} else {trend=FALSE}
if (!is.null(tickers$monthavg)){type="mean"} else {type="last";}
if (!is.null(tickers$yearend)){group="year"} else {group="month";}
if(group != "month" || type != "last" || !is.null(rang)){
output=getDataMongoDB(get,range=rang,type=type,group=group)
}else{output=outputVanilla}
#output=getData(get,range=rang,type=type,group=group)
if (!is.list(output)) {next}
func=paste("F(t) = ",output[[2]],"(t-1) + ",sep="")
notes$z[1]=func
if (!is.null(tickers$seasonal)){
if(class(try(do.call(stats::stl,list(output[[1]],s.window="periodic")),silent=T))=="try-error") {;SEASONAL=FALSE;next}
seasonal=zoo(stats::stl(output[[1]],s.window="periodic")$time.series[,1])
output[[1]]=zoo(stats::stl(output[[1]],s.window="periodic")$time.series[,2])
}
if(!is.null(tickers$outlier)) {output[[1]]=removeOutliers(output[[1]])}
input=getDataMongoDB(give,range=rang,type=type,group=group)
give
ticker=give
rang
getDataMongoDB(ticker)
ctime=Sys.time()
ticker=tolower(gsub("^\\s+|\\s+$", "",ticker))
ticker
DIM=2^11
print(paste("getDataMongoDB",ticker,rangeMDB,ALL,type,group,sep=" & "))
#mongo <- mongoDbConnect('Forecasts',host='forecasts.tradingeconomics.com')
rangeMDB=NULL
print(paste("getDataMongoDB",ticker,rangeMDB,ALL,type,group,sep=" & "))
#mongo <- mongoDbConnect('Forecasts',host='forecasts.tradingeconomics.com')
tempQuery = '"NotReallyASymbol"'
ticker=gsub("'", "", ticker)
ticker=strsplit(ticker,",")[[1]]
length(ticker)==1
if(length(ticker)>1){
for(k in 1:length(ticker))
tempQuery = paste(tempQuery,paste( ',"',ticker[k],'"',sep=""),sep="")
myQuery =paste('{"Symbol":{ "$in" : [',tempQuery,'] }',sep="")
}
myQuery
if (is.null(rangeMDB)|| !is.numeric(rangeMDB)){rangeMDB=paste(',"DateTime":{"$gt":"1990"}}',sep="")}else{rangeMDB=paste(',"DateTime":{"$gt":"',rangeMDB,'"}}',sep="")}
mongoGetQuery = paste('{"$query" :',myQuery,' ',rangeMDB,',"$orderby":{"DateTime":-1}}',sep="")
#mongoGetQuery = '{"$query" :{Symbol: { "$in" : ["usurtot","euroareazewecosenind"] },"DateTime":{"$gt":"1999"}},"$orderby":{"DateTime":-1}}'
fromDB <- dbGetQueryForKeys(mongo, 'HistoricalData', mongoGetQuery,'{}', skip=0,limit=50000)
fromDB
length(fromDB$Close)==0
fromDB$Symbol=tolower(gsub("^\\s+|\\s+$", "",fromDB$Symbol))
catg=unique(unlist(fromDB$Symbol))
catg
ALL==FALSE
length(catg)==1
length(catg)>1
query = paste("select top 1 frequency, category from tickers where historicaldatasymbol ='",catg[1],"'",sep="")
freq=sqlQuery(database, query)
tolower(freq$frequency)=="quarterly" && format(as.Date(fromDB$DateTime),"%d")[1]=="15"
object=zoo(fromDB[fromDB$Symbol==catg[1],]$Close,as.yearmon(as.Date(fromDB[fromDB$Symbol==catg[1],]$DateTime)))
object=aggregate(object,identity,mean)
object
object
i=2
query = paste("select top 1 frequency, category from tickers where historicaldatasymbol ='",catg[i],"'",sep="")
freq=sqlQuery(database, query)
tolower(freq$frequency)=="quarterly" && format(as.Date(fromDB$DateTime),"%d")[1]=="15"
temp=zoo(fromDB[fromDB$Symbol==catg[i],]$Close,as.yearmon(as.Date(fromDB[fromDB$Symbol==catg[i],]$DateTime)))
temp=aggregate(temp,identity,mean)
temp=na.approx(temp, xout=as.yearmon(start(temp)+(0:(DIM))/12))
object=merge(object,temp)
i=3
query = paste("select top 1 frequency, category from tickers where historicaldatasymbol ='",catg[i],"'",sep="")
freq=sqlQuery(database, query)
if(tolower(freq$frequency)=="quarterly" && format(as.Date(fromDB$DateTime),"%d")[1]=="15"){
a=0
a[j] = as.character(add.months(as.Date(fromDB[fromDB$Symbol==catg[i],]$DateTime[j]),1))
}
fromDB[fromDB$Symbol==catg[i],]$DateTime = a
for(j in 1:length(fromDB[fromDB$Symbol==catg[i],]$DateTime)){
}
temp=zoo(fromDB[fromDB$Symbol==catg[i],]$Close,as.yearmon(as.Date(fromDB[fromDB$Symbol==catg[i],]$DateTime)))
temp=aggregate(temp,identity,mean)
temp=na.approx(temp, xout=as.yearmon(start(temp)+(0:(DIM))/12))
temp
temp
temp
if(length(temp)<2){next;}
contArray="Potugal"
indArray="GDP"
if(contArray[1]=="all"){
country="all"
}else{
country="rAppsOCPU"
for(i in 1:length(contArray)){
country=paste(country,contArray[i],sep=",")
}
}
if(indArray[1]=="all"){
indicator="all"
}else{
indicator="rAppsOCPU"
for(i in 1:length(indArray)){
indicator=paste(indicator,indArray[i],sep=",")
}
}
url = paste(te.connect.new(), "/country/",URLencode(country),"/",URLencode(indicator),"?f=csv",sep=""); #print(url);
#print(nchar(url))
if(nchar(url)>310){
if(contArray[1]=="all"){
country1="all"
country2="all"
}else if(length(contArray)==1){
country1=contArray[1]
country2=contArray[1]
}else{
country1="rAppsOCPU"
country2="rAppsOCPU"
for(i in 1:round(length(contArray)/2)){
country1=paste(country1,contArray[i],sep=",")
}
for(i in (round(length(contArray)/2)+1):length(contArray)){
country2=paste(country2,contArray[i],sep=",")
}
}
if(indArray[1]=="all"){
indicator1="all"
indicator2="all"
}else if(length(contArray)==1){
indicator1=indArray[1]
indicator2=indArray[1]
}else{
indicator1="rAppsOCPU"
indicator2="rAppsOCPU"
for(i in 1:round(length(indArray)/2)){
indicator1=paste(indicator1,indArray[i],sep=",")
}
for(i in (round(length(indArray)/2)+1):length(indArray)){
indicator2=paste(indicator2,indArray[i],sep=",")
}
}
df1=te.get.hist.multi.free.new(strsplit(country1,",")[[1]],strsplit(indicator1,",")[[1]],d1)
df2=te.get.hist.multi.free.new(strsplit(country2,",")[[1]],strsplit(indicator2,",")[[1]],d1)
df3=te.get.hist.multi.free.new(strsplit(country1,",")[[1]],strsplit(indicator2,",")[[1]],d1)
df4=te.get.hist.multi.free.new(strsplit(country2,",")[[1]],strsplit(indicator1,",")[[1]],d1)
df = rbind(df1,df2,df3,df4)
df
}else{
df = read.csv(textConnection(RCURLgetURL(url)), row.names=NULL)
}
df
url
if(contArray[1]=="all"){
country="all"
}else{
country="rAppsOCPU"
for(i in 1:length(contArray)){
country=paste(country,contArray[i],sep=",")
}
}
if(indArray[1]=="all"){
indicator="all"
}else{
indicator="rAppsOCPU"
for(i in 1:length(indArray)){
indicator=paste(indicator,indArray[i],sep=",")
}
}
url = paste(te.connect.new(), "country/",URLencode(country),"/",URLencode(indicator),"?f=csv",sep=""); #print(url);
#print(nchar(url))
if(nchar(url)>310){
if(contArray[1]=="all"){
country1="all"
country2="all"
}else if(length(contArray)==1){
country1=contArray[1]
country2=contArray[1]
}else{
country1="rAppsOCPU"
country2="rAppsOCPU"
for(i in 1:round(length(contArray)/2)){
country1=paste(country1,contArray[i],sep=",")
}
for(i in (round(length(contArray)/2)+1):length(contArray)){
country2=paste(country2,contArray[i],sep=",")
}
}
if(indArray[1]=="all"){
indicator1="all"
indicator2="all"
}else if(length(contArray)==1){
indicator1=indArray[1]
indicator2=indArray[1]
}else{
indicator1="rAppsOCPU"
indicator2="rAppsOCPU"
for(i in 1:round(length(indArray)/2)){
indicator1=paste(indicator1,indArray[i],sep=",")
}
for(i in (round(length(indArray)/2)+1):length(indArray)){
indicator2=paste(indicator2,indArray[i],sep=",")
}
}
df1=te.get.hist.multi.free.new(strsplit(country1,",")[[1]],strsplit(indicator1,",")[[1]],d1)
df2=te.get.hist.multi.free.new(strsplit(country2,",")[[1]],strsplit(indicator2,",")[[1]],d1)
df3=te.get.hist.multi.free.new(strsplit(country1,",")[[1]],strsplit(indicator2,",")[[1]],d1)
df4=te.get.hist.multi.free.new(strsplit(country2,",")[[1]],strsplit(indicator1,",")[[1]],d1)
df = rbind(df1,df2,df3,df4)
df
}else{
df = read.csv(textConnection(RCURLgetURL(url)), row.names=NULL)
}
df
url
contArray="Portugal"
if(contArray[1]=="all"){
country="all"
}else{
country="rAppsOCPU"
for(i in 1:length(contArray)){
country=paste(country,contArray[i],sep=",")
}
}
if(indArray[1]=="all"){
indicator="all"
}else{
indicator="rAppsOCPU"
for(i in 1:length(indArray)){
indicator=paste(indicator,indArray[i],sep=",")
}
}
url = paste(te.connect.new(), "country/",URLencode(country),"/",URLencode(indicator),"?f=csv",sep=""); #print(url);
#print(nchar(url))
if(nchar(url)>310){
if(contArray[1]=="all"){
country1="all"
country2="all"
}else if(length(contArray)==1){
country1=contArray[1]
country2=contArray[1]
}else{
country1="rAppsOCPU"
country2="rAppsOCPU"
for(i in 1:round(length(contArray)/2)){
country1=paste(country1,contArray[i],sep=",")
}
for(i in (round(length(contArray)/2)+1):length(contArray)){
country2=paste(country2,contArray[i],sep=",")
}
}
if(indArray[1]=="all"){
indicator1="all"
indicator2="all"
}else if(length(contArray)==1){
indicator1=indArray[1]
indicator2=indArray[1]
}else{
indicator1="rAppsOCPU"
indicator2="rAppsOCPU"
for(i in 1:round(length(indArray)/2)){
indicator1=paste(indicator1,indArray[i],sep=",")
}
for(i in (round(length(indArray)/2)+1):length(indArray)){
indicator2=paste(indicator2,indArray[i],sep=",")
}
}
df1=te.get.hist.multi.free.new(strsplit(country1,",")[[1]],strsplit(indicator1,",")[[1]],d1)
df2=te.get.hist.multi.free.new(strsplit(country2,",")[[1]],strsplit(indicator2,",")[[1]],d1)
df3=te.get.hist.multi.free.new(strsplit(country1,",")[[1]],strsplit(indicator2,",")[[1]],d1)
df4=te.get.hist.multi.free.new(strsplit(country2,",")[[1]],strsplit(indicator1,",")[[1]],d1)
df = rbind(df1,df2,df3,df4)
df
}else{
df = read.csv(textConnection(RCURLgetURL(url)), row.names=NULL)
}
df
url
contArray=c("Portugal","spain")
indArray=c("GDP","inflation rate")
if(contArray[1]=="all"){
country="all"
}else{
country="rAppsOCPU"
for(i in 1:length(contArray)){
country=paste(country,contArray[i],sep=",")
}
}
if(indArray[1]=="all"){
indicator="all"
}else{
indicator="rAppsOCPU"
for(i in 1:length(indArray)){
indicator=paste(indicator,indArray[i],sep=",")
}
}
url = paste(te.connect.new(), "country/",URLencode(country),"/",URLencode(indicator),"?f=csv",sep=""); #print(url);
#print(nchar(url))
if(nchar(url)>310){
if(contArray[1]=="all"){
country1="all"
country2="all"
}else if(length(contArray)==1){
country1=contArray[1]
country2=contArray[1]
}else{
country1="rAppsOCPU"
country2="rAppsOCPU"
for(i in 1:round(length(contArray)/2)){
country1=paste(country1,contArray[i],sep=",")
}
for(i in (round(length(contArray)/2)+1):length(contArray)){
country2=paste(country2,contArray[i],sep=",")
}
}
if(indArray[1]=="all"){
indicator1="all"
indicator2="all"
}else if(length(contArray)==1){
indicator1=indArray[1]
indicator2=indArray[1]
}else{
indicator1="rAppsOCPU"
indicator2="rAppsOCPU"
for(i in 1:round(length(indArray)/2)){
indicator1=paste(indicator1,indArray[i],sep=",")
}
for(i in (round(length(indArray)/2)+1):length(indArray)){
indicator2=paste(indicator2,indArray[i],sep=",")
}
}
df1=te.get.hist.multi.free.new(strsplit(country1,",")[[1]],strsplit(indicator1,",")[[1]],d1)
df2=te.get.hist.multi.free.new(strsplit(country2,",")[[1]],strsplit(indicator2,",")[[1]],d1)
df3=te.get.hist.multi.free.new(strsplit(country1,",")[[1]],strsplit(indicator2,",")[[1]],d1)
df4=te.get.hist.multi.free.new(strsplit(country2,",")[[1]],strsplit(indicator1,",")[[1]],d1)
df = rbind(df1,df2,df3,df4)
df
}else{
df = read.csv(textConnection(RCURLgetURL(url)), row.names=NULL)
}
url
RCURLgetURL(url)
