scale_fill_gradient2(low = "steelblue",high = "red",midpoint=.5) +
theme_grey(base_size = 9) +
labs(x = "",y = "") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(legend.position = "none",axis.ticks = element_blank(),
axis.text.x = element_text(size = 15, angle = 310, hjust = 0, colour = "black"),
axis.text.y = element_text(size = 12, colour = "#000052"))
#+ ggtitle("Countries ~ Indicators")
}
te.tree.map=function(c,country,indicator,d1="NULL",opts=NULL){
options(stringsAsFactors = FALSE)
#df=te.get.hist.multi.free(c,country,indicator,"last")
df=te.get.mat.new(country,indicator)
df <- df[c("Country","Category","DateTime","Value")]
if(is.null(df)){stop("Return to Sender: No Such Country - Indicator Pair.")}
if(length(df)<2){stop("Return to Sender: No Such Country - Indicator Pair.")}
df$Country[!is.na(countrycode(df$Country,"country.name","iso3c"))] <- countrycode(df$Country,"country.name","iso3c")[!is.na(countrycode(df$Country,"country.name","iso3c"))]
df$Country[tolower(df$Country)=="euro area"] <- "EA17"
df$Country[df$Value<0] <- paste("(-)",df$Country[df$Value<0],sep="")
df$Value <- abs(df$Value)
treemap::treemap(df,
index=c("Country"),
vSize="Value",
title=indicator,
type="value",
vColor="Value",
palette="RdBu",
aspRatio=1,
range=c(min(df$Value),max(df$Value)))
}
#te.tree.map(c,countries,"GDP")
theHistorical=te.get.hist.multi.free.new(country,indicator)
RCURLgetURL=function(url,k=NULL,s=NULL){
if(is.null(k)) k="9541a8a3c3ccb5b"
if(is.null(s)) s="3ce8e344216b372"
RCURLhttpheader= c(Authorization = paste("Client ",k,":",s,sep=""))
RCURLopts = list(ssl.verifypeer = FALSE,timeout = 10000)
getURL(url,httpheader=RCURLhttpheader,.opts=RCURLopts)
}
##### OLD API CALLS
if(F){
set.auth=function(u="guest",p="guest"){
c(u,p)
}
te.connect=function(c){
a = 'http://54.83.43.149/data.aspx';
paste(a,'?u=',c[1],'&p=',c[2],'&f=csv',sep='');
}
te.get.mat=function(c){
url = paste(te.connect(c), '&q=matrix', sep=''); #print(url);
read.csv(url)
}
te.get.hist=function(c,country,indicator,d1="2005"){
head=FALSE
if(tolower(d1)=="last"){d1="2009";head=TRUE}
url = paste(te.connect(c), "&","d1=",d1,"&q=historical&c=",URLencode(country),"&i=",URLencode(indicator),sep=""); #print(url);
df = read.csv(url)
if(is.null(df$DateTime)){return (NULL)}
df$DateTime=as.Date(df$DateTime,"%m/%d/%Y")
if(head){df=df[order(df$DateTime,decreasing=TRUE),][1,]}
df
}
te.get.hist.multi=function(c,reqArray,d1="2005"){
dataFrame=data.frame()
for(i in 1:length(reqArray)){
dataFrame=rbind(dataFrame,te.get.hist(c,strsplit(reqArray[i],":")[[1]][1],strsplit(reqArray[i],":")[[1]][2],d1))
}
dataFrame
}
te.get.hist.multi.free=function(c,contArray,indArray,d1="2005"){
dataFrame=data.frame()
temp=data.frame()
for(i in 1:length(contArray)){
for(j in 1:length(indArray)){
temp=te.get.hist(c,contArray[i],indArray[j],d1)
if(is.null(temp)){next}
dataFrame=rbind(dataFrame,temp)
}
}
dataFrame
}
te.get.hist.multi.free.na=function(c,contArray,indArray,d1="2005"){
options(stringsAsFactors = FALSE)
dataFrame=data.frame()
temp=data.frame()
for(i in 1:length(contArray)){
for(j in 1:length(indArray)){
temp=te.get.hist(c,contArray[i],indArray[j],d1)
if(is.null(temp)){temp = as.data.frame(t(c(contArray[i],indArray[j],NA,NA)));names(temp)=c("Country","Category","DateTime","Value")}
dataFrame=rbind(dataFrame,temp)
}
}
dataFrame
}
historicalToMatrix = function(c,countries,indicators){
options(stringsAsFactors = FALSE)
newdf=data.frame()
df=data.frame()
myTempDF=data.frame()
df=te.get.hist.multi.free(c,countries,indicators,"last")
for(i in 1:length(countries))
{
#print(i)
myTempDF=cbind(data.frame(t(df[tolower(df$Country)==tolower(countries[i]),c('Category','Value')])),countries[i])
if(length(myTempDF)<length(indicators)+1){next}
names(myTempDF)=c(myTempDF['Category',1:length(indicators)],'Country')
newdf=rbind(newdf,myTempDF['Value',])
}
#return(list(message=paste(names(newdf),collapse=" # ")))
newdf[,1:length(indicators)]<-lapply(newdf[,1:length(indicators)],as.numeric)
#return(list(message=paste(paste(df,collapse=" J "),paste(newdf,collapse=" H "),collapse=" ! ")))
newdf
}
}
################
te.connect.new=function(){
a = 'https://teapi.azurewebsites.net';
#a = 'http://api2.tradingeconomics.com';
a
}
theHistorical=te.get.hist.multi.free.new(country,indicator)
theHistorical
Sys.Date()
as.numeric(format(Sys.Date(),"%Y"))-5
d1 = as.character(as.numeric(format(Sys.Date(),"%Y"))-5)
theHistorical=te.get.hist.multi.free.new(country,indicator,d1)
theHistorical
theforecasts
names(theForecasts)
theforecasts=te.cleanForecasts(DateTime,Value,Model,LastUpdate)
names(theforecasts)
names(theforecasts) = c("DateTime","Close","Category","LastUpdate")
rbind(theforecasts,theHistorical)
rbind(theforecasts[c("DateTime","Close","Category")],theHistorical[c("DateTime","Close","Category")])
theHistorical$DateTime = as.Date(theHistorical$DateTime)
rbind(theforecasts[c("DateTime","Close","Category")],theHistorical[c("DateTime","Close","Category")])
theforecasts$DateTime = as.Date(theforecasts$DateTime)
rbind(theforecasts[c("DateTime","Close","Category")],theHistorical[c("DateTime","Close","Category")])
ggplot(dataFrame,aes(x=DateTime, y=Close, colour=Category)) +
geom_line() +
xlab("") + ylab("") +
theme(axis.text.y = axis,
panel.border=element_blank(),
axis.line=element_line(colour = "grey",size=.3),
panel.background = element_blank(),
panel.grid.minor = element_line(colour = "grey",size=.2),
panel.grid.major = element_line(colour = "grey",size=.3)) +
theme(legend.position=position) +
theme(plot.title = element_blank())
dataFrame=rbind(theforecasts[c("DateTime","Close","Category")],theHistorical[c("DateTime","Close","Category")])
ggplot(dataFrame,aes(x=DateTime, y=Close, colour=Category)) +
geom_line() +
xlab("") + ylab("") +
theme(axis.text.y = axis,
panel.border=element_blank(),
axis.line=element_line(colour = "grey",size=.3),
panel.background = element_blank(),
panel.grid.minor = element_line(colour = "grey",size=.2),
panel.grid.major = element_line(colour = "grey",size=.3)) +
theme(legend.position=position) +
theme(plot.title = element_blank())
ggplot(dataFrame,aes(x=DateTime, y=Close, colour=Category)) +
geom_line() +
xlab("") + ylab("") +
theme(axis.text.y = element_blank(),
panel.border=element_blank(),
axis.line=element_line(colour = "grey",size=.3),
panel.background = element_blank(),
panel.grid.minor = element_line(colour = "grey",size=.2),
panel.grid.major = element_line(colour = "grey",size=.3)) +
theme(legend.position=position) +
theme(plot.title = element_blank())
ggplot(dataFrame,aes(x=DateTime, y=Close, colour=Category)) +
geom_line() +
xlab("") + ylab("") +
theme(axis.text.y = element_blank(),
panel.border=element_blank(),
axis.line=element_line(colour = "grey",size=.3),
panel.background = element_blank(),
panel.grid.minor = element_line(colour = "grey",size=.2),
panel.grid.major = element_line(colour = "grey",size=.3)) +
theme(legend.position="bottom") +
theme(plot.title = element_blank())
ggplot(dataFrame,aes(x=DateTime, y=Close, colour=Category)) +
geom_line() +
xlab("") + ylab("") +
theme(axis.text.y = element_blank(),
panel.border=element_blank(),
axis.line=element_line(colour = "grey",size=.3),
panel.background = element_blank(),
panel.grid.minor = element_line(colour = "grey",size=.2),
panel.grid.major = element_line(colour = "grey",size=.3)) +
theme(legend.position="top") +
theme(plot.title = element_blank())
te.historicalPlusForecasts(country,indicator,DateTime,Value,Model,LastUpdate){
theforecasts=te.cleanForecasts(DateTime,Value,Model,LastUpdate)
names(theforecasts) = c("DateTime","Close","Category","LastUpdate")
d1 = as.character(as.numeric(format(Sys.Date(),"%Y"))-5)
theHistorical=te.get.hist.multi.free.new(country,indicator,d1)
theHistorical$DateTime = as.Date(theHistorical$DateTime)
theforecasts$DateTime = as.Date(theforecasts$DateTime)
dataFrame=rbind(theforecasts[c("DateTime","Close","Category")],theHistorical[c("DateTime","Close","Category")])
ggplot(dataFrame,aes(x=DateTime, y=Close, colour=Category)) +
geom_line() +
xlab("") + ylab("") +
theme(axis.text.y = element_blank(),
panel.border=element_blank(),
axis.line=element_line(colour = "grey",size=.3),
panel.background = element_blank(),
panel.grid.minor = element_line(colour = "grey",size=.2),
panel.grid.major = element_line(colour = "grey",size=.3)) +
theme(legend.position="top") +
theme(plot.title = element_blank())
}
te.historicalPlusForecasts = function(country,indicator,DateTime,Value,Model,LastUpdate){
theforecasts=te.cleanForecasts(DateTime,Value,Model,LastUpdate)
names(theforecasts) = c("DateTime","Close","Category","LastUpdate")
d1 = as.character(as.numeric(format(Sys.Date(),"%Y"))-5)
theHistorical=te.get.hist.multi.free.new(country,indicator,d1)
theHistorical$DateTime = as.Date(theHistorical$DateTime)
theforecasts$DateTime = as.Date(theforecasts$DateTime)
dataFrame=rbind(theforecasts[c("DateTime","Close","Category")],theHistorical[c("DateTime","Close","Category")])
ggplot(dataFrame,aes(x=DateTime, y=Close, colour=Category)) +
geom_line() +
xlab("") + ylab("") +
theme(axis.text.y = element_blank(),
panel.border=element_blank(),
axis.line=element_line(colour = "grey",size=.3),
panel.background = element_blank(),
panel.grid.minor = element_line(colour = "grey",size=.2),
panel.grid.major = element_line(colour = "grey",size=.3)) +
theme(legend.position="top") +
theme(plot.title = element_blank())
}
theHistorical
ggplot(dataFrame,aes(x=DateTime, y=Close, colour=Category)) +
geom_line() +
xlab("") + ylab("") +
theme(axis.text.y = element_blank(),
panel.border=element_blank(),
axis.line=element_line(colour = "grey",size=.3),
panel.background = element_blank(),
panel.grid.minor = element_line(colour = "grey",size=.2),
panel.grid.major = element_line(colour = "grey",size=.3)) +
theme(legend.position="top") +
theme(plot.title = element_blank())
ggplot(dataFrame,aes(x=DateTime, y=Close, colour=Category)) +
geom_line() +
xlab("") + ylab("") +
theme(axis.text.y = element_blank(),
panel.border=element_blank(),
axis.line=element_line(colour = "grey",size=.3),
panel.background = element_blank(),
panel.grid.minor = element_line(colour = "grey",size=.2),
panel.grid.major = element_line(colour = "grey",size=.3)) +
theme(legend.position="top") +
scale_color_manual(values=c("#CC6666", "#9999CC")) +
theme(plot.title = element_blank())
ggplot(dataFrame,aes(x=DateTime, y=Close, colour=Category)) +
geom_line() +
xlab("") + ylab("") +
theme(axis.text.y = element_blank(),
panel.border=element_blank(),
axis.line=element_line(colour = "grey",size=.3),
panel.background = element_blank(),
panel.grid.minor = element_line(colour = "grey",size=.2),
panel.grid.major = element_line(colour = "grey",size=.3)) +
theme(legend.position="top") +
scale_color_manual(values=c("#CC6666")) +
theme(plot.title = element_blank())
rep("red",20)
ggplot(dataFrame,aes(x=DateTime, y=Close, colour=Category)) +
geom_line() +
xlab("") + ylab("") +
theme(axis.text.y = element_blank(),
panel.border=element_blank(),
axis.line=element_line(colour = "grey",size=.3),
panel.background = element_blank(),
panel.grid.minor = element_line(colour = "grey",size=.2),
panel.grid.major = element_line(colour = "grey",size=.3)) +
theme(legend.position="top") +
scale_color_manual(values=c("black",rep("red",50))) +
theme(plot.title = element_blank())
ggplot(dataFrame,aes(x=DateTime, y=Close, colour=Category)) +
geom_line() +
xlab("") + ylab("") +
theme(axis.text.y = element_blank(),
panel.border=element_blank(),
axis.line=element_line(colour = "grey",size=.3),
panel.background = element_blank(),
panel.grid.minor = element_line(colour = "grey",size=.2),
panel.grid.major = element_line(colour = "grey",size=.3)) +
theme(legend.position="top") +
scale_color_manual(values=c("red",rep("black",50))) +
theme(plot.title = element_blank())
dataFrame=rbind(tail(theHistorical[c("DateTime","Close","Category")],25),theforecasts[c("DateTime","Close","Category")])
ggplot(dataFrame,aes(x=DateTime, y=Close, colour=Category)) +
geom_line() +
xlab("") + ylab("") +
theme(axis.text.y = element_blank(),
panel.border=element_blank(),
axis.line=element_line(colour = "grey",size=.3),
panel.background = element_blank(),
panel.grid.minor = element_line(colour = "grey",size=.2),
panel.grid.major = element_line(colour = "grey",size=.3)) +
theme(legend.position="top") +
scale_color_manual(values=c("red",rep("black",50))) +
theme(plot.title = element_blank())
Indicator
indicator
ggplot(dataFrame,aes(x=DateTime, y=Close, colour=Category)) +
geom_line() +
xlab("") + ylab("") +
theme(axis.text.y = element_blank(),
panel.border=element_blank(),
axis.line=element_line(colour = "grey",size=.3),
panel.background = element_blank(),
panel.grid.minor = element_line(colour = "grey",size=.2),
panel.grid.major = element_line(colour = "grey",size=.3)) +
theme(legend.position="top") +
scale_color_manual(values=c(indicator="red",rep("black",50))) +
theme(plot.title = element_blank())
dataFrame
indicator
indicator= "Unemployment Rate"
ggplot(dataFrame,aes(x=DateTime, y=Close, colour=Category)) +
geom_line() +
xlab("") + ylab("") +
theme(axis.text.y = element_blank(),
panel.border=element_blank(),
axis.line=element_line(colour = "grey",size=.3),
panel.background = element_blank(),
panel.grid.minor = element_line(colour = "grey",size=.2),
panel.grid.major = element_line(colour = "grey",size=.3)) +
theme(legend.position="top") +
scale_color_manual(values=c(indicator="red",rep("black",50))) +
theme(plot.title = element_blank())
ggplot(dataFrame,aes(x=DateTime, y=Close, colour=Category)) +
geom_line() +
xlab("") + ylab("") +
theme(axis.text.y = element_blank(),
panel.border=element_blank(),
axis.line=element_line(colour = "grey",size=.3),
panel.background = element_blank(),
panel.grid.minor = element_line(colour = "grey",size=.2),
panel.grid.major = element_line(colour = "grey",size=.3)) +
theme(legend.position="top") +
scale_color_manual(values=c("Unemployment Rate"="red",rep("black",50))) +
theme(plot.title = element_blank())
ggplot(dataFrame,aes(x=DateTime, y=Close, colour=Category)) +
geom_line() +
xlab("") + ylab("") +
theme(axis.text.y = element_blank(),
panel.border=element_blank(),
axis.line=element_line(colour = "grey",size=.3),
panel.background = element_blank(),
panel.grid.minor = element_line(colour = "grey",size=.2),
panel.grid.major = element_line(colour = "grey",size=.3)) +
theme(legend.position="top") +
scale_color_manual(values=c(get(indicator)="red",rep("black",50))) +
theme(plot.title = element_blank())
get(indicator)
ggplot(dataFrame,aes(x=DateTime, y=Close, colour=Category)) +
geom_line() +
xlab("") + ylab("") +
theme(axis.text.y = element_blank(),
panel.border=element_blank(),
axis.line=element_line(colour = "grey",size=.3),
panel.background = element_blank(),
panel.grid.minor = element_line(colour = "grey",size=.2),
panel.grid.major = element_line(colour = "grey",size=.3)) +
theme(legend.position="top") +
scale_color_manual(values=c(indicator="red",rep("black",50))) +
theme(plot.title = element_blank())
ggplot(dataFrame,aes(x=DateTime, y=Close, colour=Category)) +
geom_line() +
xlab("") + ylab("") +
theme(axis.text.y = element_blank(),
panel.border=element_blank(),
axis.line=element_line(colour = "grey",size=.3),
panel.background = element_blank(),
panel.grid.minor = element_line(colour = "grey",size=.2),
panel.grid.major = element_line(colour = "grey",size=.3)) +
theme(legend.position="top") +
scale_color_manual(values=c("red",rep("black",50))) +
theme(plot.title = element_blank())
dataFrame[dataFrame$Category==indicator, ]
ggplot(dataFrame,aes(x=DateTime, y=Close, colour=Category)) +
geom_line() +
xlab("") + ylab("") +
geom_point(data=dataFrame[dataFrame$Category==indicator, ], aes(x=DateTime, y=Close), colour="red", size=5) +
theme(axis.text.y = element_blank(),
panel.border=element_blank(),
axis.line=element_line(colour = "grey",size=.3),
panel.background = element_blank(),
panel.grid.minor = element_line(colour = "grey",size=.2),
panel.grid.major = element_line(colour = "grey",size=.3)) +
theme(legend.position="top") +
scale_color_manual(values=c(rep("black",50))) +
theme(plot.title = element_blank())
ggplot(dataFrame,aes(x=DateTime, y=Close, colour=Category)) +
geom_line() +
xlab("") + ylab("") +
geom_line(data=dataFrame[dataFrame$Category==indicator, ], aes(x=DateTime, y=Close), colour="red", size=5) +
theme(axis.text.y = element_blank(),
panel.border=element_blank(),
axis.line=element_line(colour = "grey",size=.3),
panel.background = element_blank(),
panel.grid.minor = element_line(colour = "grey",size=.2),
panel.grid.major = element_line(colour = "grey",size=.3)) +
theme(legend.position="top") +
scale_color_manual(values=c(rep("black",50))) +
theme(plot.title = element_blank())
ggplot(dataFrame,aes(x=DateTime, y=Close, colour=Category)) +
geom_line() +
xlab("") + ylab("") +
geom_line(data=dataFrame[dataFrame$Category==indicator, ], aes(x=DateTime, y=Close), colour="black", size=5) +
theme(axis.text.y = element_blank(),
panel.border=element_blank(),
axis.line=element_line(colour = "grey",size=.3),
panel.background = element_blank(),
panel.grid.minor = element_line(colour = "grey",size=.2),
panel.grid.major = element_line(colour = "grey",size=.3)) +
theme(legend.position="top") +
scale_color_manual(values=c(rep("red",50))) +
theme(plot.title = element_blank())
ggplot(dataFrame,aes(x=DateTime, y=Close, colour=Category)) +
geom_line() +
xlab("") + ylab("") +
geom_line(data=dataFrame[dataFrame$Category==indicator, ], aes(x=DateTime, y=Close), colour="black", size=2) +
theme(axis.text.y = element_blank(),
panel.border=element_blank(),
axis.line=element_line(colour = "grey",size=.3),
panel.background = element_blank(),
panel.grid.minor = element_line(colour = "grey",size=.2),
panel.grid.major = element_line(colour = "grey",size=.3)) +
theme(legend.position="top") +
scale_color_manual(values=c(rep("red",50))) +
theme(plot.title = element_blank())
ggplot(dataFrame,aes(x=DateTime, y=Close, colour=Category)) +
geom_line() +
xlab("") + ylab("") +
geom_line(data=dataFrame[dataFrame$Category==indicator, ], aes(x=DateTime, y=Close), colour="black", size=2) +
theme(axis.text.y = element_blank(),
panel.border=element_blank(),
axis.line=element_line(colour = "grey",size=.3),
panel.background = element_blank(),
panel.grid.minor = element_line(colour = "grey",size=.2),
panel.grid.major = element_line(colour = "grey",size=.3)) +
theme(legend.position="top") +
theme(plot.title = element_blank())
ggplot(dataFrame,aes(x=DateTime, y=Close, colour=Category)) +
geom_line() +
xlab("") + ylab("") +
geom_line(data=dataFrame[dataFrame$Category==indicator, ], aes(x=DateTime, y=Close), colour="black", size=1) +
theme(axis.text.y = element_blank(),
panel.border=element_blank(),
axis.line=element_line(colour = "grey",size=.3),
panel.background = element_blank(),
panel.grid.minor = element_line(colour = "grey",size=.2),
panel.grid.major = element_line(colour = "grey",size=.3)) +
theme(legend.position="top") +
theme(plot.title = element_blank())
rep("red",50)
source("C:/git/Forecasts/nodeWS/NRscript/libraries.R")
source("C:/git/Forecasts/nodeWS/NRscript/Funcs.R")
source("C:/git/Forecasts/nodeWS/NRscript/MarketsFuncs.R")
ticker = "negdpey"
object=list()
SEASONAL=TRUE;
model= "ALL"
jason=getVariablesMongoDB(ticker,model)
mongo <- mongoDbConnect('TE',host='forecasts.tradingeconomics.com')
jason=getVariablesMongoDB(ticker,model)
jason
variables=jason$Variables;model=jason$Model
outputVanilla=getDataMongoDB(ticker,range=NULL,type="last",group="month")
database=odbcDriverConnect("DRIVER=SQL Server;SERVER=API.TRADINGECONOMICS.COM;DATABASE=TE;UId=TEAnalyst;PWD=TEAnalyst!1")
variables=jason$Variables;model=jason$Model
outputVanilla=getDataMongoDB(ticker,range=NULL,type="last",group="month")
outputVanilla
j=5
variables[j]
if(variables[j]=='delete'){next}
tickers=fromJSON(as.character(variables[j]))
if (is.null(tickers$x)){next}
give=paste(tickers$x[2:length(tickers$x)], collapse = '\',\'')
get=paste(tickers$x[1], collapse = '\',\'')
tickers
country = c("Netherlands:GDP Annual Growth Rate", "Netherlands:Business Confidence", "NONE:NONE", "NONE:NONE")
indicator=NULL
te.plot.multi(1,country,indicator)
te.plot.multi(1,country,indicator,"01-01-1995")
te.plot.multi(1,country,indicator,""01-01-2008"")
te.plot.multi(1,country,indicator,""01-01-2008")
te.plot.multi(1,country,indicator,"01-01-2008")
country
d1
d1 = "01-01-2008"
dataFrame=te.get.hist.multi.new(country,d1)
dataFrame
te.plot.multi(1,country,indicator,"01-01-2008")
dataFrame=te.get.hist.multi.new(country,d1)
dataFrame
country = c("United States:GDP Annual Growth Rate", "United States:Business Confidence", "NONE:NONE", "NONE:NONE")
dataFrame=te.get.hist.multi.new(country,d1)
dataFrame
te.plot.multi(1,c("Portugal:GDP","Spain:GDP"),NULL,"01-01-2008")
te.plot.multi(1,c("Portugal:GDP","Spain:GDP"),"NULL","01-01-2008")
typeof(indicator)
indicator
