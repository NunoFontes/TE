if (!isFreshMongoDB(ticker)) {if (!silent){print("data is not fresh")} ;return (0)}
#jason=getVariables(ticker,model);variables=jason$variables;model=jason$model
jason=getVariablesMongoDB(ticker,model)
if(is.na(jason)) return(0)
#versions=loadVersionOutlookMongoDB(ticker)
variables=jason$Variables;model=jason$Model
#print(variables)
outputVanilla=getDataMongoDB(ticker,range=NULL,type="last",group="month")
for (j in 1:max(length(variables),1)){
#print(model[j])
if(is.na(variables[j])){#print("empty")
;next}
notes=list()
if(variables[j]=='delete'){next}
tickers=fromJSON(as.character(variables[j]))
if (is.null(tickers$x)){next}
give=paste(tickers$x[2:length(tickers$x)], collapse = '\',\'')
get=paste(tickers$x[1], collapse = '\',\'')
if (!silent){#print(get)
}
#JUMP OUT IF NO NEW INFORMATION WAS ADDED
#new=NA
#if (force=="false"){new=getInfo(get,give,model[j],!is.null(spec))}
#if (!is.na(new) && !new ){if(!silent){#print("No new Info, Forecast would be redundant")
#  ;next}}
if (!is.null(tickers$ar)){ar=as.numeric(tickers$ar)} else {ar=12}
if (!is.null(tickers$i)){i=as.numeric(tickers$i)} else {i=NA}
if (!is.null(range)){rang=range}else if(!is.null(tickers$range)){rang=tickers$range} else {rang=NULL}
if (!is.null(tickers$mean)){meanrev=mean(output[[1]])} else {meanrev=FALSE}
if (!is.null(tickers$upperlim)){upperlim=tickers$upperlim} else {upperlim=FALSE}
if (!is.null(tickers$lowerlim)){lowerlim=tickers$lowerlim} else {lowerlim=FALSE}
if (!is.null(tickers$trend)){trend=tickers$trend;if(trend>20){trend=20};if(trend< -10){trend=-10}} else {trend=FALSE}
if (!is.null(tickers$monthavg)){type="mean"} else {type="last";}
if (!is.null(tickers$yearend)){group="year"} else {group="month";}
if(group != "month" || type != "last" || !is.null(rang)){
output=getDataMongoDB(get,range=rang,type=type,group=group)
}else{output=outputVanilla}
#output=getData(get,range=rang,type=type,group=group)
if (!is.list(output)) {next}
func=paste("F(t) = ",output[[2]],"(t-1) + ",sep="")
notes$z[1]=func
if (!is.null(tickers$seasonal)){
if(class(try(do.call(stats::stl,list(output[[1]],s.window="periodic")),silent=T))=="try-error") {;SEASONAL=FALSE;next}
seasonal=zoo(stats::stl(output[[1]],s.window="periodic")$time.series[,1])
output[[1]]=zoo(stats::stl(output[[1]],s.window="periodic")$time.series[,2])
}
if(!is.null(tickers$outlier)) {output[[1]]=removeOutliers(output[[1]])}
if(length(unlist(tickers$x))==1){
object[[j]]=getUnivForecast(output,to=to,ar=ar,i=i)
#print(object[[j]])
}else{
#input=getData(give,range=rang,type=type,group=group)
input=getDataMongoDB(give,range=rang,type=type,group=group)
#print(input[[1]])
#the code will check if the inputs are longer than the output. If they are shorter they are removed from the model, if they are longer they are used to forecast, if they are the same length cetaris paribus is assumed (change to analyst's opinion in the future)
if(is.list(input)){#print("ticker was deleted/changed")
; next;}
if(input[[1]]==0){#print("ticker was deleted/changed")
; next;}
if(length(colnames(input[[1]]))>1)
{ for(i in colnames(input[[1]]))
{ if(end(zoo(trimNA(input[[1]][,i])))<end(output[[1]]))
{ func=paste(func,"[",i,"](0) + ",sep="")
input[[1]]=input[[1]][,!colnames(input[[1]]) %in% c(input[[2]][i])]
}else if(end(zoo(trimNA(input[[1]][,i])))==end(output[[1]]))
{ func=paste(func,i,"(t-1) + ",sep="")
}else { func=paste(func,i,"(t) + ",sep="")}
}
}else {if(end(zoo(trimNA(input[[1]][,1])))<end(output[[1]]))
{ func=paste(func,"[",input[[2]][1],"](0) + ",sep="")
input[[1]]=input[[1]][,!colnames(input[[1]]) %in% c(input[[2]][i])]
}else if(end(zoo(trimNA(input[[1]][,1])))==end(output[[1]]))
{ func=paste(func,input[[2]][1],"(t-1) + ",sep="")
}else { func=paste(func,input[[2]][1],"(t) + ",sep="")}
}
#The series to forecast has to be 'slower' & it has to be at least 1.5 years long & both series should overlap at least 1.5 years
if (!is.null(dim(input[[1]]))) {if(dim(input[[1]])[2]>1) {compare=trimNA(input[[1]])[,1]}}
else {compare=trimNA(input[[1]])}
if (end(zoo(trimNA(input[[1]])))>=end(output[[1]]) && length(merge.zoo(zoo(compare), zoo(trimNA(output[[1]])), all = FALSE)[,1])>18)
{
object[[j]]=multivForecast(input,output,to=to,analyst=analyst,ar=ar)
#### do nothing if conditions are not met
} else { if(!silent){#print("NOT ENOUGH DATA")
}
; next}
}
# model name ?
if (is.null(method)){mthd=as.character(model[j])} else{mthd=method}
#### rounding !
if(!is.ts(object[[j]]) && !is.zoo(object[[j]]) && !is.zoo(object[[j]][[1]]) && !is.ts(object[[j]][[1]])){next}
if (!is.null(tickers$seasonal) && SEASONAL) {
if (is.ts(object[[j]]) || is.zoo(object[[j]]))
{
for (i in 1:length(object[[j]])) {
if (!is.zoo(object[[j]]))
{
object[[j]]=zoo(object[[j]])
}
object[[j]][i]=object[[j]][i]+seasonal[time(seasonal)-floor(time(seasonal))==time(object[[j]][i])-floor(time(object[[j]][[1]][i]))][1][[1]]
}
}else {
if (!is.zoo(object[[j]][[1]]))
{
if (frequency(object[[j]][[1]])==4){
object[[j]][[1]]=zoo(as.vector(object[[j]][[1]]),time(object[[j]][[1]]))#+.25)
object[[j]][[2]]=zoo(as.vector(object[[j]][[2]]),time(object[[j]][[2]]))#+.25)
object[[j]][[3]]=zoo(as.vector(object[[j]][[3]]),time(object[[j]][[3]]))#+.25)
}
object[[j]][[1]]=zoo(object[[j]][[1]])
object[[j]][[2]]=zoo(object[[j]][[2]])
object[[j]][[3]]=zoo(object[[j]][[3]])
}
for (i in 1:length(object[[j]][[1]])){
object[[j]][[1]][i]=object[[j]][[1]][i]+seasonal[round(time(seasonal)-floor(time(seasonal)),3)==round(time(object[[j]][[1]][i])-floor(time(object[[j]][[1]][i])),3)][1][[1]]
object[[j]][[2]][i]=object[[j]][[2]][i]+seasonal[round(time(seasonal)-floor(time(seasonal)),3)==round(time(object[[j]][[2]][i])-floor(time(object[[j]][[2]][i])),3)][1][[1]]
object[[j]][[3]][i]=object[[j]][[3]][i]+seasonal[round(time(seasonal)-floor(time(seasonal)),3)==round(time(object[[j]][[3]][i])-floor(time(object[[j]][[3]][i])),3)][1][[1]]
}
}
#time(object[[j]][[3]][i])-floor(time(object[[j]][[3]][i]))
#seasonal[round(time(seasonal)-floor(time(seasonal)),3)==0.667]
}
#INTEREST RATE ROUNDING: APPLY SAME PHILOSOPHY ON UR & IJC
# if it is on an upward trend do this
# round(mean(output[[1]][length(output[[1]]):(length(output[[1]])-12)]))
# test=ceiling(a*100/25)*25/100
if((output[[4]])[1] %in% c("Interest Rate","Interbank Rate"))
{
if(!is.list(object[[j]]))
{
object[[j]]=round(object[[j]]/25,2)*25}
else {object[[j]][[1]]=round(object[[j]][[1]]/25,2)*25}
}else if ((output[[4]])[1] %in% "Unemployment Rate")
{
if(!is.list(object[[j]]))
{object[[j]]=round(object[[j]],1)}
else {object[[j]][[1]]=round(object[[j]][[1]],1)}
}else if ((output[[4]])[1] %in% "Initial Jobless Claims" || (output[[4]])[1] %in% "Non Farm Payrolls")
{
if(!is.list(object[[j]]))
{object[[j]]=round(object[[j]],0)}
else {object[[j]][[1]]=round(object[[j]][[1]],0)}
}else if ("Sales Tax Rate" %in% (output[[4]])[1] || "Corporate Tax Rate" %in% (output[[4]])[1] || "Personal Income Tax Rate" %in% (output[[4]])[1] || "Social Security Rate" %in% (output[[4]])[1] || "Social Security Rate For Companies" %in% (output[[4]])[1] || "Social Security Rate For Employees" %in% (output[[4]])[1] || "Sales Tax Rate" %in% (output[[4]])[1])
{
if(!is.list(object[[j]]))
{object[[j]]=round(object[[j]],0)}
else {object[[j]][[1]]=round(object[[j]][[1]],0)}
}
if(meanrev){
if(!is.list(object[[j]])){
object[[j]]=zoo(meanrev*(0:REVERTS_TO_MEAN_PERIODS)/REVERTS_TO_MEAN_PERIODS+as.numeric(object[[j]])*(REVERTS_TO_MEAN_PERIODS:0)/REVERTS_TO_MEAN_PERIODS,index(object[[j]]))
}else{
object[[j]][[3]]=zoo(meanrev*(0:REVERTS_TO_MEAN_PERIODS)/REVERTS_TO_MEAN_PERIODS+as.numeric(object[[j]][[3]])*(REVERTS_TO_MEAN_PERIODS:0)/REVERTS_TO_MEAN_PERIODS,index(object[[j]][[3]]))
object[[j]][[2]]=zoo(meanrev*(0:REVERTS_TO_MEAN_PERIODS)/REVERTS_TO_MEAN_PERIODS+as.numeric(object[[j]][[2]])*(REVERTS_TO_MEAN_PERIODS:0)/REVERTS_TO_MEAN_PERIODS,index(object[[j]][[2]]))
object[[j]][[1]]=zoo(meanrev*(0:REVERTS_TO_MEAN_PERIODS)/REVERTS_TO_MEAN_PERIODS+as.numeric(object[[j]][[1]])*(REVERTS_TO_MEAN_PERIODS:0)/REVERTS_TO_MEAN_PERIODS,index(object[[j]][[1]]))
}
}
if(trend){
if(!is.list(object[[j]])){
object[[j]]=zoo(as.numeric(object[[j]][[1]])[1]*(1+.01*trend)*(((0:REVERTS_TO_MEAN_PERIODS)/REVERTS_TO_MEAN_PERIODS)^2)+as.numeric(object[[j]])*(1-((0:REVERTS_TO_MEAN_PERIODS)/REVERTS_TO_MEAN_PERIODS)^2),index(object[[j]]))
}else{
object[[j]][[3]]=zoo(as.numeric(object[[j]][[1]])[1]*(1+.01*trend)*(((0:REVERTS_TO_MEAN_PERIODS)/REVERTS_TO_MEAN_PERIODS)^2)+as.numeric(object[[j]][[3]])*(1-((0:REVERTS_TO_MEAN_PERIODS)/REVERTS_TO_MEAN_PERIODS)^2),index(object[[j]][[3]]))
object[[j]][[2]]=zoo(as.numeric(object[[j]][[1]])[1]*(1+.01*trend)*(((0:REVERTS_TO_MEAN_PERIODS)/REVERTS_TO_MEAN_PERIODS)^2)+as.numeric(object[[j]][[2]])*(1-((0:REVERTS_TO_MEAN_PERIODS)/REVERTS_TO_MEAN_PERIODS)^2),index(object[[j]][[2]]))
object[[j]][[1]]=zoo(as.numeric(object[[j]][[1]])[1]*(1+.01*trend)*(((0:REVERTS_TO_MEAN_PERIODS)/REVERTS_TO_MEAN_PERIODS)^2)+as.numeric(object[[j]][[1]])*(1-((0:REVERTS_TO_MEAN_PERIODS)/REVERTS_TO_MEAN_PERIODS)^2),index(object[[j]][[1]]))
}
}
notes$z[1]=substr(func, 1, nchar(func)-2)
notes=toJSON(notes)
if ((output[[3]])[1] %in% c("Monthly","MONTHLY")){
feedTimes=min(max(ceiling(daysAhead/30),1),24)
} else if((output[[3]])[1]  %in% c("Quarterly","QUARTERLY")){
#feedTimes=min(max(ceiling(daysAhead/90),1),6)
feedTimes=min(max(ceiling(daysAhead/30),1),10)
} else if((output[[3]])[1]  %in% "Weekly"){
feedTimes=min(max(ceiling(daysAhead/7),1),12)
} else if((output[[3]])[1]  %in% c("Yearly","ANNUALLY")){
feedTimes=1
} else {feedTimes=1}
if(insert){
#database=odbcDriverConnect("DRIVER=SQL Server;SERVER=DB.TRADINGECONOMICS.COM;DATABASE=TE;UId=TEAnalyst;PWD=TEAnalyst!1")
#  database=connectTE()
#  query=paste("update forecastvariables set notes='",notes,"',lastupdate=getdate() where variables='",jason$variables[j],"'",sep="")
#  fromDB=sqlQuery(database, query)
#  odbcClose(database)
if(is.null(spec)){
#print(feedTimes)
for (k in 1:feedTimes){
a=pushToMongoDB((output[[2]])[1],object[[j]],mthd,(output[[3]])[1],idx=k,period=k)
}
}
else{
for (k in 1:length(spec)){
# print("spec")
# print(spec[k])
indx=paste(as.numeric(substr(spec[k],4,7))+(as.numeric(substr(spec[k],1,2))-1)/12,sep="")
# print("indx")
# print(indx)
# print("output[[2]]")
# print(output[[2]])
a=pushToMongoDB((output[[2]])[1],object[[j]],mthd,(output[[3]])[1],idx=indx,period=0)
}
}}
#print(round(object[[j]][indx],2))}
#print(j)
#print(method)
if (!silent) {#print(notes)
}
}
if (report)  {  cat(paste(" \n",Sys.time()," - ",ticker," (", tag,")"),append=TRUE) }
return (1)#object)
}
add.months= function(date,n) seq(date, by = paste (n, "months"), length = 2)[2]
pushToMongoDB=function(symbol,ts,method,frequency,period=1,idx=1){
#library(RMongo)
#print("pushToMongoDB")
ctime=Sys.time()
#mongo <- mongoDbConnect('Forecasts',host='forecasts.tradingeconomics.com')
#print(paste(symbol,ts,method,frequency,period,idx,sep=" | "))
if(!is.list(ts)){lower=upper=ts=round(ts,2)} else {
lower=round(ts[[3]],2)
upper=round(ts[[2]],2)
ts=round(ts[[1]],2)}
if (period>0)
{if(frequency %in% c("Quarterly","quarterly","QUARTERLY")){
quarterToMonth=c("03","03","03","06","06","06","09","09","09","12","12","12")
quarterToMonthDay=c("31","31","31","30","30","30","30","30","30","31","31","31")
#date=paste("', DATEADD(mm, 2,convert(datetime,convert(varchar,DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,CONVERT(datetime,'",as.Date(as.yearmon(time((ts))))[idx],"',120))+1,0)),101))),",sep="")
d1=as.Date(as.yearmon(time((ts))))[idx]
mongodate=as.Date(paste(format(d1,"%Y"),quarterToMonth[as.numeric(format(d1,"%m"))],quarterToMonthDay[as.numeric(format(d1,"%m"))],sep="-"))
#print(paste(d1,mongodate,sep=" | "))
}else if(frequency %in% c("Weekly","weekly")){
#date=paste("',(select latestvaluedate+7*",period," from tickers where historicaldatasymbol='",symbol,"'),",sep="")
d1=as.Date(as.yearmon(time((ts))))[idx]
mongodate = add.months(d1,1)-1
#print(paste(d1,mongodate))
}else if(frequency %in% c("Yearly","yearly","annual","Annual","ANNUALLY")){
#date=paste("',convert(datetime,convert(varchar,DATEPART(yy,CONVERT(datetime,'",as.Date(as.yearmon(time((ts))))[idx],"',120)))+'-12-31'),",sep="")
d1=as.Date(as.yearmon(time((ts))))[idx]
mongodate = as.Date(paste(format(d1,"%Y"),"-12-31",sep=""))
#print(paste(d1,mongodate))
}else if(frequency %in% c("Semesterly","semesterly"))
{#date=paste("',(select DATEADD(d, -1, DATEADD(mm, DATEDIFF(m, 0, latestvaluedate)+7, 0)) from tickers where historicaldatasymbol='",symbol,"'),",sep="")
d1=as.Date(as.yearmon(time((ts[idx]))))
mongodate=add.months(d1,1)-1
#print(date)
}else{#date=paste("',DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,CONVERT(datetime,replace('",as.Date(as.yearmon(time((ts))))[idx],"','-','.'),102))+1,0)),",sep="")
d1=as.Date(as.yearmon(time((ts[idx]))))
mongodate=add.months(d1,1)-1
#print(paste(d1,mongodate,date,sep=" | "))
}
}
if (period==0)
{
adjust=0
align=F
if(frequency(ts)==2){align=T}
ts=na.approx(zoo(ts), xout=as.yearmon(start(zoo(ts))+adjust+(0:(30*12)/12)))
upper=na.approx(zoo(upper), xout=as.yearmon(start(zoo(upper))+adjust+(0:(30*12)/12)))
lower=na.approx(zoo(lower), xout=as.yearmon(start(zoo(lower))+adjust+(0:(30*12)/12)))
if(align)
{
index(ts)=index(ts)-1/4
index(upper)=index(upper)-1/4
index(lower)=index(lower)-1/4
}
if (start(ts)>as.yearmon(as.numeric(idx))) {return (0)}
#date=paste("',DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,CONVERT(datetime,replace('",as.Date(as.yearmon(time((ts[idx])))),"','-','.'),102))+1,0)),",sep="")
d1=as.Date(as.yearmon(time((ts[idx]))))
mongodate=add.months(d1,1)-1
#print(paste(d1,mongodate,sep=" | "))
}
versionoutlook=getVersionOutlook(symbol,method)
#print(versions)
#version=versions[tolower(trim(versions$Model))==trim(method),]$Version
#outlook=versions[tolower(trim(versions$Model))==trim(method),]$Outlook
version=versionoutlook[[1]]
outlook=versionoutlook[[2]]
if(!is.numeric(version)) version=0
if(!is.numeric(outlook)) outlook=0
mongoDocumentToInsert = paste('{"Symbol":"',symbol
,'", "DateTime":"',mongodate
,'", "Value" :', ts[idx][[1]]
,', "Upperband" :', upper[idx][[1]]
,', "Lowerband" :', lower[idx][[1]]
,', "Model" : "', method
,'", "Version" :',version
,', "Outlook" : ',outlook
,', "LastUpdate" : "', Sys.time()
,'"}'
,sep="")
#print(mongoDocumentToInsert)
dbInsertDocument(mongo, "ForecastData2", mongoDocumentToInsert)
print(Sys.time()-ctime)
#print(query)
#diag=sqlQuery(database, query)
#dbDisconnect(mongo)
return (1)
}
getVersionOutlook = function(ticker,model){
print("getVersionOutlook")
ctime=Sys.time()
mongoGetQuery = paste('{"$query" : {"Symbol": {"$regex":"^',ticker,'$","$options":"i"},"Model": {"$regex":"',model,'","$options":"i"}},"$orderby":{"LastUpdate":-1}}',sep="")
query <- dbGetQueryForKeys(mongo, 'ForecastData', mongoGetQuery,'{}', skip=0,limit=1)
print(Sys.time()-ctime)
if (length(query)<1) return (list(0,0))
return(list(query$Version,query$Outlook))
}
getBestModelMongoDB = function(ticker){
#print("getBestModelMongoDB")
#ctime=Sys.time()
#print(ticker)
#mongo <- mongoDbConnect('Forecasts',host='forecasts.tradingeconomics.com')
mongoGetQuery = paste('{"$query" : {"Symbol": {"$regex":"^',ticker,'$","$options":"i"}},"$orderby":{"Version":-1}}',sep="")
query <- dbGetQueryForKeys(mongo, 'ForecastData', mongoGetQuery,'{}', skip=0,limit=1)
#print(query)
#dbDisconnect(mongo)
if(!is.null(query$Model)){print(query$Model);return(trim(query$Model))}
#print(Sys.time()-ctime)
return("Seasonal V1")
}
getVariablesMongoDB = function(ticker,model){
print("getVariablesMongoDB")
#ctime=Sys.time()
#print(ticker)
#mongo <- mongoDbConnect('Forecasts',host='forecasts.tradingeconomics.com')
if (tolower(model)=="all"){request=paste('{"Ticker": {"$regex":"^',ticker,'$","$options":"i"},"Variables": {"$gt":"a"}}',sep="")
}else if (tolower(model)=="bestmodel"){
bestmodel = getBestModelMongoDB(ticker)
request=paste('{"Model":"',bestmodel,'","Ticker": {"$regex":"^',ticker,'$","$options":"i"},"Variables": {"$gt":"a"}}',sep="")
}else{
request=paste('{"Model":"',model,'","Ticker": {"$regex":"^',ticker,'$","$options":"i"},"Variables": {"$gt":"a"}}',sep="")
}
#print(request)
query <- dbGetQueryForKeys(mongo, 'ForecastVariables', request,'{"Model":1,"Variables":1}')
#print(query)
#dbDisconnect(mongo)
#print(Sys.time()-ctime)
if(length(query)<1) return(c(NA))
return (query)
}
isFreshMongoDB = function(ticker){
print("isFreshMongoDB")
ctime=Sys.time()
#mongo <- mongoDbConnect('Forecasts',host='forecasts.tradingeconomics.com')
mongoGetQuery = paste('{"$query" : {"Symbol": {"$regex":"^',ticker,'$","$options":"i"}},"$orderby":{"DateTime":-1}}',sep="")
query <- dbGetQueryForKeys(mongo, 'HistoricalData', mongoGetQuery,'{}', skip=0,limit=1)
#query
#dbDisconnect(mongo)
if (length(query$DateTime)==0) {datetime=as.Date('1900-01-01')}else {datetime=as.Date(query$DateTime)}
print(Sys.time()-ctime)
return (datetime>as.Date('2008-01-01'))
}
getDataMongoDB = function(ticker,range=NULL,ALL=FALSE,type="last",group="month"){
ctime=Sys.time()
DIM=2^11
print(paste("getDataMongoDB",ticker,range,ALL,type,group,sep=" & "))
#mongo <- mongoDbConnect('Forecasts',host='forecasts.tradingeconomics.com')
myQuery = '{nothing:"to_see_here"}'
ticker=gsub("'", "", ticker)
ticker=strsplit(ticker,",")[[1]]
if(length(ticker)==1) myQuery = paste('{"Symbol": {"$regex":"^',ticker,'$","$options":"i"}}',sep="")
if(length(ticker)>1)
for(k in 1:length(ticker))
myQuery = paste(myQuery,paste( ',{"Symbol": {"$regex":"^',ticker[k],'$","$options":"i"}}',sep=""),sep="")
if (is.null(range)|| !is.numeric(range)){range=""}else{range=paste(',"DateTime":{"$gt":"',range,'"}',sep="")}
mongoGetQuery = paste('{"$query" :{ "$or" : [',myQuery,']',range,'},"$orderby":{"DateTime":-1}}',sep="")
fromDB <- dbGetQueryForKeys(mongo, 'HistoricalData', mongoGetQuery,'{}', skip=0,limit=500)
#fromDB
#dbDisconnect(mongo)
if (length(fromDB$Close)==0) {return (0)}
fromDB$Symbol=tolower(gsub("^\\s+|\\s+$", "",fromDB$Symbol))
catg=unique(unlist(fromDB$Symbol))
if(ALL==FALSE){
if (length(catg)==1){
query = paste("select top 1 frequency, category from tickers where historicaldatasymbol ='",catg[1],"'",sep="")
freq=sqlQuery(database, query)
if(tolower(freq$frequency)=="quarterly" && format(as.Date(fromDB$DateTime),"%d")[1]=="15"){
a=0
for(i in 1:length(fromDB$DateTime)){
a[i] = as.Date(add.months(as.Date(fromDB$DateTime[i]),1))
}
fromDB$DateTime = a
}
object=zoo(fromDB[fromDB$Symbol==catg[1],]$Close,as.yearmon(as.Date(fromDB[fromDB$Symbol==catg[1],]$DateTime)))
object=aggregate(object,identity,mean)
if(length(object)>1)
object=na.approx(object, xout=as.yearmon(start(object)+(0:(DIM))/12))
}
if (length(catg)>1){
query = paste("select top 1 frequency, category from tickers where historicaldatasymbol ='",catg[1],"'",sep="")
freq=sqlQuery(database, query)
if(tolower(freq$frequency)=="quarterly" && format(as.Date(fromDB$DateTime),"%d")[1]=="15"){
a=0
for(j in 1:length(fromDB[fromDB$Symbol==catg[1],]$DateTime)){
a[j] = as.character(add.months(as.Date(fromDB[fromDB$Symbol==catg[1],]$DateTime[j]),1))
}
fromDB[fromDB$Symbol==catg[1],]$DateTime = a
}
object=zoo(fromDB[fromDB$Symbol==catg[1],]$Close,as.yearmon(as.Date(fromDB[fromDB$Symbol==catg[1],]$DateTime)))
object=aggregate(object,identity,mean)
for (i in 2:length(catg)){
query = paste("select top 1 frequency, category from tickers where historicaldatasymbol ='",catg[i],"'",sep="")
freq=sqlQuery(database, query)
if(tolower(freq$frequency)=="quarterly" && format(as.Date(fromDB$DateTime),"%d")[1]=="15"){
a=0
for(j in 1:length(fromDB[fromDB$Symbol==catg[i],]$DateTime)){
a[j] = as.character(add.months(as.Date(fromDB[fromDB$Symbol==catg[i],]$DateTime[j]),1))
}
fromDB[fromDB$Symbol==catg[i],]$DateTime = a
}
temp=zoo(fromDB[fromDB$Symbol==catg[i],]$Close,as.yearmon(as.Date(fromDB[fromDB$Symbol==catg[i],]$DateTime)))
temp=aggregate(temp,identity,mean)
temp=na.approx(temp, xout=as.yearmon(start(temp)+(0:(DIM))/12))
object=merge(object,temp)
}}
}else{query = paste("select top 1 frequency, category from tickers where historicaldatasymbol ='",ticker,"'",sep="")
freq=sqlQuery(database, query)
object=zoo(fromDB[fromDB$Symbol==catg[1],]$Close,as.Date(fromDB[fromDB$Symbol==catg[1],]$DateTime))
}
names(object)=catg
#print(object)
print(Sys.time()-ctime)
return(list(object,catg,as.character((freq$frequency)[1]),as.character((freq$category)[1])))
}
loadVersionOutlook = function(ticker){
print("loadVersionOutlook")
ctime=Sys.time()
myQuery = paste('{"Ticker": {"$regex":"^',ticker,'$","$options":"i"}}',sep="")
mongoGetQuery = paste('{"$query" :',myQuery,'}',sep="")
fromDB <- dbGetQueryForKeys(mongo, 'ForecastVariables', mongoGetQuery,'{"Ticker":1,"Model":1}',skip=0,limit=50000)
for(i in 1:length(fromDB$Model)){
myQuery = paste('{"Symbol": {"$regex":"^',trim(fromDB$Ticker[i]),'$","$options":"i"},"Model": {"$regex":"^',trim(fromDB$Model[i]),'$","$options":"i"}},"$orderby":{"LastUpdate":-1}',sep="")
mongoGetQuery = paste('{"$query" :',myQuery,'}',sep="")
verOut <- dbGetQueryForKeys(mongo, 'ForecastData', mongoGetQuery,'{}',skip=0,limit=1)
print(verOut)
if(length(verOut)<1){version[i]=0;outlook[i]=0}else{version[i]=verOut$Version;outlook[i]=verOut$Outlook}
}
print(Sys.time()-ctime)
return (fromDB)
}
loadVersionOutlookMongoDB = function(ticker){
print("loadVersionOutlook")
ctime=Sys.time()
myQuery = paste('{"Ticker": {"$regex":"^',ticker,'$","$options":"i"}}',sep="")
mongoGetQuery = paste('{"$query" :',myQuery,'}',sep="")
fromDB <- dbGetQueryForKeys(mongo, 'ForecastVariables', mongoGetQuery,'{"Ticker":1,"Model":1}',skip=0,limit=50000)
outlook=0
version=0
for(i in 1:length(fromDB$Model)){
myQuery = paste('{"Symbol": {"$regex":"^',trim(fromDB$Ticker[i]),'$","$options":"i"},"Model": {"$regex":"^',trim(fromDB$Model[i]),'$","$options":"i"}},"$orderby":{"LastUpdate":-1}',sep="")
mongoGetQuery = paste('{"$query" :',myQuery,'}',sep="")
verOut <- dbGetQueryForKeys(mongo, 'ForecastData', mongoGetQuery,'{}',skip=0,limit=1)
#print(verOut)
if(length(verOut)<1){version[i]=0;outlook[i]=0}else{version[i]=verOut$Version;outlook[i]=verOut$Outlook}
}
print(Sys.time()-ctime)
return (cbind(fromDB,version,outlook))
}
runItMongoDB = function(diag,insert=FALSE,daysAhead=91,model="BESTMODEL",silent=TRUE,report=F,spec=NULL,to=2020,force="false"){
#print(daysAhead)
#database=connectTE()
for (i in 1:length(diag)){
print(i)
print(diag[i])
a=getForecastMongoDB(ticker=diag[i],insert=insert,daysAhead=daysAhead,model=model,silent=silent,report=report,spec=spec,to=to,force=force)
}
#odbcClose(database)
}
runItMongoDB("BotswanaIR",insert=T,silent=T,report=F,model="BESTMODEL",spec=c("03/2014","06/2014","09/2014","12/2014","12/2015","12/2020","12/2030"),to=2045,force="true")
ticker
mongoGetQuery = paste('{"$query" : {"Symbol": {"$regex":"^',ticker,'$","$options":"i"}},"$orderby":{"Version":-1}}',sep="")
mongoGetQuery
query <- dbGetQueryForKeys(mongo, 'ForecastData', mongoGetQuery,'{}', skip=0,limit=1)
query
request
query <- dbGetQueryForKeys(mongo, 'ForecastVariables', request,'{"Model":1,"Variables":1}')
query <- dbGetQueryForKeys(mongo, 'ForecastVariables', request,'{"Model":1,"Variables":1}')
query
bestmodel = getBestModelMongoDB(ticker)
request=paste('{"Model":"',trim(bestmodel),'","Ticker": {"$regex":"^',ticker,'$","$options":"i"},"Variables": {"$gt":"a"}}',sep="")
request
request=paste('{"Model":{"$regex":"',model,'","$options":"i"},"Ticker": {"$regex":"^',ticker,'$","$options":"i"},"Variables": {"$gt":"a"}}',sep="")
request
bestmodel = getBestModelMongoDB(ticker)
bestmodel
request=paste('{"Model":{"$regex":"^',bestmodel,'$","$options":"i"},"Ticker": {"$regex":"^',ticker,'$","$options":"i"},"Variables": {"$gt":"a"}}',sep="")
bestmodel
request
request=paste('{"Model":{"$regex":"',bestmodel,'","$options":"i"},"Ticker": {"$regex":"^',ticker,'$","$options":"i"},"Variables": {"$gt":"a"}}',sep="")
request
query <- dbGetQueryForKeys(mongo, 'ForecastVariables', request,'{"Model":1,"Variables":1}')
query
getVariablesMongoDB = function(ticker,model){
print("getVariablesMongoDB")
#ctime=Sys.time()
#print(ticker)
#mongo <- mongoDbConnect('Forecasts',host='forecasts.tradingeconomics.com')
if (tolower(model)=="all"){request=paste('{"Ticker": {"$regex":"^',ticker,'$","$options":"i"},"Variables": {"$gt":"a"}}',sep="")
}else if (tolower(model)=="bestmodel"){
bestmodel = getBestModelMongoDB(ticker)
request=paste('{"Model":{"$regex":"',bestmodel,'","$options":"i"},"Ticker": {"$regex":"^',ticker,'$","$options":"i"},"Variables": {"$gt":"a"}}',sep="")
}else{
request=paste('{"Model":{"$regex":"',model,'","$options":"i"},"Ticker": {"$regex":"^',ticker,'$","$options":"i"},"Variables": {"$gt":"a"}}',sep="")
}
#print(request)
query <- dbGetQueryForKeys(mongo, 'ForecastVariables', request,'{"Model":1,"Variables":1}')
#print(query)
#dbDisconnect(mongo)
#print(Sys.time()-ctime)
if(length(query)<1) return(c(NA))
return (query)
}
runItMongoDB("BotswanaIR",insert=T,silent=T,report=F,model="BESTMODEL",spec=c("03/2014","06/2014","09/2014","12/2014","12/2015","12/2020","12/2030"),to=2045,force="true")
