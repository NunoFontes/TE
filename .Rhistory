countries=paste(country,paste(countries,collapse="_#_"),sep="_#_")
for(i in 1:max(1,min(howmany-1,length(indicator)))){
plotsList[[i+1]]=te.plot.object(countries,indicator[i+1])
}
}
if(length(plotsList)==1){
if(!is.null(opts) && opts$align=='horizontal'){ncols=length(plotsList)}else{ncols=1}
arrange_ggplot2(plotsList[[1]],ncol=ncols)
}
if(length(plotsList)==2){
if(!is.null(opts) && opts$align=='horizontal'){ncols=length(plotsList)}else{ncols=1}
arrange_ggplot2(plotsList[[1]],plotsList[[2]],ncol=ncols)
}
if(length(plotsList)==3){
if(!is.null(opts) && opts$align=='horizontal'){ncols=length(plotsList)}else{ncols=1}
arrange_ggplot2(plotsList[[1]],plotsList[[2]],plotsList[[3]],ncol=ncols)
}
if(length(plotsList)>3){
if(!is.null(opts) && opts$align=='horizontal'){ncols=4}else{ncols=1}
arrange_ggplot2(plotsList[[1]],plotsList[[2]],plotsList[[3]],plotsList[[4]],ncol=ncols)
}
}
te.tableOfCharts(1,"Africa",c("Unemployment Rate","Youth Unemployment Rate","Long Term Unemployment Rate"))
mapCountryData(sPDF,
nameColumnToPlot="Value",
addLegend=FALSE,
colourPalette=colourPalette,
oceanCol="white",
borderCol="grey",
missingCountryCol="white",
mapTitle="", #paste(opts,indicator,sep=" - "),
mapRegion=opts,
numCats=30)
country
indicator
indicator = c("GDP","unemployment rate")
options(stringsAsFactors = FALSE)
#theFunction=get(c)
theFunction=get("te.plot.multi")
plotsList = list()
howmany = 4
if(is.na(match(tolower(country),tolower(GROUPS_OF_COUNTRIES)))){
if(length(indicator)>1 && length(country)>1){
for(i in 1:min(howmany,length(indicator))){
plotsList[[i]]=theFunction(1,country,indicator[i],d1,opts)}
}else{plotsList[[1]]=theFunction(1,country,indicator,d1,opts)}
}else{
#geoMapCountries = te.group.of.countries(country,"Atlantis",300)
#plotsList[[1]] = te.geomap(1,geoMapCountries,indicator[1],opts="world")
countries = te.group.of.countries(country,"Atlantis",3)
countries=paste(country,paste(countries,collapse="_#_"),sep="_#_")
for(i in 1:max(1,min(howmany-1,length(indicator)))){
plotsList[[1]]=te.plot.object(countries,indicator[1])
}
}
length(plotsList)
arrange_ggplot2(plotsList[[1]],ncol=ncols)
ncols=1
arrange_ggplot2(plotsList[[1]],ncol=ncols)
typeof(arrange_ggplot2(plotsList[[1]],ncol=ncols))
mapCountryData(sPDF,
nameColumnToPlot="Value",
addLegend=FALSE,
colourPalette=colourPalette,
oceanCol="white",
borderCol="grey",
missingCountryCol="white",
mapTitle="", #paste(opts,indicator,sep=" - "),
mapRegion=opts,
numCats=30)
a =   mapCountryData(sPDF,
nameColumnToPlot="Value",
addLegend=FALSE,
colourPalette=colourPalette,
oceanCol="white",
borderCol="grey",
missingCountryCol="white",
mapTitle="", #paste(opts,indicator,sep=" - "),
mapRegion=opts,
numCats=30)
a
typeof(a)
a
mapCountryData
sys.call()[[1]]
rwmNewMapPlot
country = "asia"
country
c=1
is.na(match(tolower(country[c]),tolower(GROUPS_OF_COUNTRIES)))
te.group.of.countries(country[c],"Atlantis")
country
te.plot.compare=function(c,country,indicator,d1="NULL",opts=NULL){
#assign("df",historicalToMatrix(c,country,indicator), envir = environment())
df=data.frame()
countries=c()
for(c in 1:length(country)){
if(is.na(match(tolower(country[c]),tolower(GROUPS_OF_COUNTRIES)))){
countries=c(countries,country[c])
}else{
countries=c(countries,te.group.of.countries(country[c],"Atlantis"))
}
}
country=countries
if(length(country)==1) country = c(country,"United States","United Kingdom","Germany","India")
if(length(indicator)==1) indicator = c(indicator,"Population")
assign("df",historicalToMatrix.new(c,country,indicator), envir = environment())
if(is.null(df)){stop("Return to Sender: No Such Country - Indicator Pair.")}
if(length(df)<2){stop("Return to Sender: No Such Country - Indicator Pair.")}
df$Country[!is.na(countrycode(df$Country,"country.name","iso3c"))] <- countrycode(df$Country,"country.name","iso3c")[!is.na(countrycode(df$Country,"country.name","iso3c"))]
df$Country[tolower(df$Country)=="euro area"] <- "EA17"
titl=paste(indicator[1], indicator[2],sep=" ~ ")
ggplot(df, aes(get(names(df)[1]), get(names(df)[2])),environment=environment()) +
geom_point(shape=22,fill="black") +
# geom_point(aes(colour = get(names(df)[3]))) +
# scale_colour_gradient(high = "red") +
theme(panel.border=element_blank(),
axis.line=element_line(colour = "grey",size=.3),
panel.background = element_blank(),
panel.grid.minor = element_line(colour = "grey",size=.2),
panel.grid.major = element_line(colour = "grey",size=.3)) +
geom_text(fontface=3, label=df$Country, hjust=0, vjust=0) +
xlab(indicator[1]) + ylab(indicator[2]) +
geom_smooth(method = "lm", formula = y ~ poly(x, 1),se=F,colour="#08088A") +
geom_smooth(method = "lm", formula = y ~ poly(x, 2),se=F,colour="#08088A", size = .2)
#+ ggtitle(titl)
}
te.plot.compare=function(1,"europe","gdp")
te.plot.compare(1,"europe","gdp")
te.plot.compare=function(c,country,indicator,d1="NULL",opts=NULL){
#assign("df",historicalToMatrix(c,country,indicator), envir = environment())
df=data.frame()
countries=c()
for(c in 1:length(country)){
if(is.na(match(tolower(country[c]),tolower(GROUPS_OF_COUNTRIES)))){
countries=c(countries,country[c])
}else{
countries=c(countries,te.group.of.countries(country[c],"Atlantis",10))
}
}
country=countries
if(length(country)==1) country = c(country,"United States","United Kingdom","Germany","India")
if(length(indicator)==1) indicator = c(indicator,"Population")
assign("df",historicalToMatrix.new(c,country,indicator), envir = environment())
if(is.null(df)){stop("Return to Sender: No Such Country - Indicator Pair.")}
if(length(df)<2){stop("Return to Sender: No Such Country - Indicator Pair.")}
df$Country[!is.na(countrycode(df$Country,"country.name","iso3c"))] <- countrycode(df$Country,"country.name","iso3c")[!is.na(countrycode(df$Country,"country.name","iso3c"))]
df$Country[tolower(df$Country)=="euro area"] <- "EA17"
titl=paste(indicator[1], indicator[2],sep=" ~ ")
ggplot(df, aes(get(names(df)[1]), get(names(df)[2])),environment=environment()) +
geom_point(shape=22,fill="black") +
# geom_point(aes(colour = get(names(df)[3]))) +
# scale_colour_gradient(high = "red") +
theme(panel.border=element_blank(),
axis.line=element_line(colour = "grey",size=.3),
panel.background = element_blank(),
panel.grid.minor = element_line(colour = "grey",size=.2),
panel.grid.major = element_line(colour = "grey",size=.3)) +
geom_text(fontface=3, label=df$Country, hjust=0, vjust=0) +
xlab(indicator[1]) + ylab(indicator[2]) +
geom_smooth(method = "lm", formula = y ~ poly(x, 1),se=F,colour="#08088A") +
geom_smooth(method = "lm", formula = y ~ poly(x, 2),se=F,colour="#08088A", size = .2)
#+ ggtitle(titl)
}
te.plot.compare(1,"europe","gdp")
te.stats(1,c("united states","france"),c("Unemployment Rate"))
te.tableOfCharts(1,"europe","Unemployment Rate")
te.tableOfCharts = function(c,country,indicator,d1="2005",opts=NULL){
options(stringsAsFactors = FALSE)
#theFunction=get(c)
theFunction=get("te.plot.multi")
plotsList = list()
howmany = 4
if(is.na(match(tolower(country),tolower(GROUPS_OF_COUNTRIES)))){
if(length(indicator)>1 && length(country)>1){
for(i in 1:min(howmany,length(indicator))){
plotsList[[i]]=theFunction(1,country,indicator[i],d1,opts)}
}else{plotsList[[1]]=theFunction(1,country,indicator,d1,opts)}
}else{
#geoMapCountries = te.group.of.countries(country,"Atlantis",300)
#plotsList[[1]] = te.geomap(1,geoMapCountries,indicator[1],opts="world")
countries = te.group.of.countries(country,"Atlantis",3)
countries=paste(country,paste(countries,collapse="_#_"),sep="_#_")
for(i in 1:max(1,min(howmany-1,length(indicator)))){
plotsList[[1]]=te.plot.object(countries,indicator[1])
}
}
if(length(plotsList)==1){
if(!is.null(opts) && opts$align=='horizontal'){ncols=length(plotsList)}else{ncols=1}
arrange_ggplot2(plotsList[[1]],ncol=ncols)
}
if(length(plotsList)==2){
if(!is.null(opts) && opts$align=='horizontal'){ncols=length(plotsList)}else{ncols=1}
arrange_ggplot2(plotsList[[1]],plotsList[[2]],ncol=ncols)
}
if(length(plotsList)==3){
if(!is.null(opts) && opts$align=='horizontal'){ncols=length(plotsList)}else{ncols=1}
arrange_ggplot2(plotsList[[1]],plotsList[[2]],plotsList[[3]],ncol=ncols)
}
if(length(plotsList)>3){
if(!is.null(opts) && opts$align=='horizontal'){ncols=4}else{ncols=1}
arrange_ggplot2(plotsList[[1]],plotsList[[2]],plotsList[[3]],plotsList[[4]],ncol=ncols)
}
}
te.tableOfCharts(1,"europe","Unemployment Rate")
country="europe"
indicator="unemployment rate"
theFunction=get("te.plot.multi")
plotsList = list()
howmany = 4
is.na(match(tolower(country),tolower(GROUPS_OF_COUNTRIES)))
countries = te.group.of.countries(country,"Atlantis",3)
newmap <- getMap(resolution = "coarse") #'low' or even 'coarse' resolution map may be sufficient
#example data for 2 years 6 months each
month <- c(1:6,1:6)
year <- c(rep(2012,6),rep(2013,6))
lon <- c(120:131)
lat <- c(-35:-24)
p1 <- data.frame(month=month,year=year,lon=lon,lat=lat)
months <- unique(p1$month)
years <- unique(p1$year)
oldPar <- par(mar=c(2, 0, 0, 2)) #margins top,bottom,left,right
#use layout to create multiple panels including space at top for a title
nPanels <- layout( cbind(c(0,1:6),c(0,7:12))
, heights=c(lcm(1),rep(1,6))
, respect=F )
for( yrNum in 1:length(years) )
{
yr <- years[yrNum]
for( moNum in 1:length(months) )
{
mo <- months[moNum]
cat(yr,mo,"\n")
plot(newmap, xlim = c(110, 155), ylim = c(-35, -20), asp = 1)
mtext( paste(yr,"month",mo), cex=0.7) #add titile to subplot
pMoYr <- p1[ p1$year==yr & p1$month==mo, ]
points(pMoYr$lon, pMoYr$lat, col = "red", cex = 3)
}
}
mtext("rworldmap layout demo",outer=TRUE,line=-2)
par(oldPar)
test.geomap = function(c,country="NULL",indicator,d1="",opts=NULL){
newmap <- getMap(resolution = "coarse") #'low' or even 'coarse' resolution map may be sufficient
#example data for 2 years 6 months each
month <- c(1:6,1:6)
year <- c(rep(2012,6),rep(2013,6))
lon <- c(120:131)
lat <- c(-35:-24)
p1 <- data.frame(month=month,year=year,lon=lon,lat=lat)
months <- unique(p1$month)
years <- unique(p1$year)
oldPar <- par(mar=c(2, 0, 0, 2)) #margins top,bottom,left,right
#use layout to create multiple panels including space at top for a title
nPanels <- layout( cbind(c(0,1:6),c(0,7:12))
, heights=c(lcm(1),rep(1,6))
, respect=F )
for( yrNum in 1:length(years) ){
yr <- years[yrNum]
for( moNum in 1:length(months) )  {
mo <- months[moNum]
cat(yr,mo,"\n")
plot(newmap, xlim = c(110, 155), ylim = c(-35, -20), asp = 1)
mtext( paste(yr,"month",mo), cex=0.7) #add titile to subplot
pMoYr <- p1[ p1$year==yr & p1$month==mo, ]
points(pMoYr$lon, pMoYr$lat, col = "red", cex = 3)
}
}
mtext("rworldmap layout demo",outer=TRUE,line=-2)
par(oldPar)
}
test.geomap()
test.geomap = function(c="w",country="NULL",indicator,d1="",opts=NULL){
newmap <- getMap(resolution = "coarse") #'low' or even 'coarse' resolution map may be sufficient
#example data for 2 years 6 months each
month <- c(1:6,1:6)
year <- c(rep(2012,6),rep(2013,6))
lon <- c(120:131)
lat <- c(-35:-24)
p1 <- data.frame(month=month,year=year,lon=lon,lat=lat)
months <- unique(p1$month)
years <- unique(p1$year)
oldPar <- par(mar=c(2, 0, 0, 2)) #margins top,bottom,left,right
#use layout to create multiple panels including space at top for a title
nPanels <- layout( cbind(c(0,1:6),c(0,7:12))
, heights=c(lcm(1),rep(1,6))
, respect=F )
for( yrNum in 1:length(years) ){
yr <- years[yrNum]
for( moNum in 1:length(months) )  {
mo <- months[moNum]
cat(yr,mo,"\n")
plot(newmap, xlim = c(110, 155), ylim = c(-35, -20), asp = 1)
mtext( paste(yr,"month",mo), cex=0.7) #add titile to subplot
pMoYr <- p1[ p1$year==yr & p1$month==mo, ]
points(pMoYr$lon, pMoYr$lat, col = "red", cex = 3)
}
}
mtext("rworldmap layout demo",outer=TRUE,line=-2)
par(oldPar)
}
test.geomap()
newmap
oldPar <- par(mar=c(2, 0, 0, 2)) #margins top,bottom,left,right
#use layout to create multiple panels including space at top for a title
nPanels <- layout( cbind(c(0,1:2),c(0,3:4))
, heights=c(lcm(1),rep(1,6))
, respect=F )
par(oldPar)
layout.show(nPanels)
nPanels <- layout( cbind(c(0,1),c(0,2))
, heights=c(lcm(1),rep(1,6))
, respect=F )
layout.show(nPanels)
par(oldPar)
mapCountryData(sPDF,
nameColumnToPlot="Value",
addLegend=FALSE,
colourPalette=colourPalette,
oceanCol="white",
borderCol="grey",
missingCountryCol="white",
mapTitle="",#paste(indicator),
mapRegion=opts,
numCats=30)
dev.null()
dev.Null()
dev.new()
dev.new()
dev.clean()
dev.clear()
plot.new()
mapCountryData(sPDF,
nameColumnToPlot="Value",
addLegend=FALSE,
colourPalette=colourPalette,
oceanCol="white",
borderCol="grey",
missingCountryCol="white",
mapTitle="",#paste(indicator),
mapRegion=opts,
numCats=30)
getMap(resolution = "coarse")
newmap
sPDF,
nameColumnToPlot="Value",
addLegend=FALSE,
colourPalette=colourPalette,
oceanCol="white",
borderCol="grey",
missingCountryCol="white",
mapTitle="",#paste(indicator),
mapRegion=opts,
numCats=30
sPDF
plot(sPDF,
nameColumnToPlot="Value",
addLegend=FALSE,
colourPalette=colourPalette,
oceanCol="white",
borderCol="grey",
missingCountryCol="white",
mapTitle="",#paste(indicator),
mapRegion=opts,
numCats=30)
mapCountryData(sPDF,
nameColumnToPlot="Value",
addLegend=FALSE,
colourPalette=colourPalette,
oceanCol="white",
borderCol="grey",
missingCountryCol="white",
mapTitle="",#paste(indicator),
mapRegion=opts,
numCats=30)
te.tableOfCharts(1,"Europe","GDP")
country
countries = te.group.of.countries(country,"Atlantis",3)
countries
countries=paste(country,paste(countries,collapse="_#_"),sep="_#_")
countries = te.group.of.countries(country,countries,3)
countries = te.group.of.countries(country,"Atlantis",3)
countries
countries = te.group.of.countries(country,countries,3)
countries
countries = te.group.of.countries(country,"Atlantis",5)
countries
theFunction(1,countries,indicator,d1,opts)
te.tableOfCharts = function(c,country,indicator,d1="2005",opts=NULL){
d1="2010"
options(stringsAsFactors = FALSE)
#theFunction=get(c)
theFunction=get("te.plot.multi")
plotsList = list()
howmany = 4
if(is.na(match(tolower(country),tolower(GROUPS_OF_COUNTRIES)))){
if(length(indicator)>1 && length(country)>1){
for(i in 1:min(howmany,length(indicator))){
plotsList[[i]]=theFunction(1,country,indicator[i],d1,opts)
}
if(length(indicator) == 1){
countries = te.group.of.countries(country,"Atlantis",6)
plotsList[[2]]=theFunction(1,countries,indicator,d1,opts)
}
}else{plotsList[[1]]=theFunction(1,country,indicator,d1,opts)}
}else{
#geoMapCountries = te.group.of.countries(country,"Atlantis",300)
#plotsList[[1]] = te.geomap(1,geoMapCountries,indicator[1],opts="world")
countries = te.group.of.countries(country,"Atlantis",3)
countries=paste(country,paste(countries,collapse="_#_"),sep="_#_")
for(i in 1:max(1,min(howmany,length(indicator)))){
plotsList[[i]]=te.plot.object(countries,indicator[i])
}
if(length(indicator) == 1){
countries = te.group.of.countries(country,"Atlantis",6)
plotsList[[2]]=theFunction(1,countries,indicator,d1,opts)
}
}
if(length(plotsList)==1){
if(!is.null(opts) && opts$align=='horizontal'){ncols=length(plotsList)}else{ncols=1}
arrange_ggplot2(plotsList[[1]],ncol=ncols)
}
if(length(plotsList)==2){
if(!is.null(opts) && opts$align=='horizontal'){ncols=length(plotsList)}else{ncols=1}
arrange_ggplot2(plotsList[[1]],plotsList[[2]],ncol=ncols)
}
if(length(plotsList)==3){
if(!is.null(opts) && opts$align=='horizontal'){ncols=length(plotsList)}else{ncols=1}
arrange_ggplot2(plotsList[[1]],plotsList[[2]],plotsList[[3]],ncol=ncols)
}
if(length(plotsList)>3){
if(!is.null(opts) && opts$align=='horizontal'){ncols=4}else{ncols=1}
arrange_ggplot2(plotsList[[1]],plotsList[[2]],plotsList[[3]],plotsList[[4]],ncol=ncols)
}
}
par(mai=c(0,0,0,0),mar=c(0,0,1,0),oma=c(0,0,0,0),xaxs="i",yaxs="i")
colourPalette <- brewer.pal(20,"YlOrRd")
mapCountryData(sPDF,
nameColumnToPlot="Value",
addLegend=FALSE,
colourPalette=colourPalette,
oceanCol="white",
borderCol="grey",
missingCountryCol="white",
mapTitle="",#paste(indicator),
mapRegion=opts,
numCats=30)
colourPalette <- brewer.pal(20,"PuGnBu")
mapCountryData(sPDF,
nameColumnToPlot="Value",
addLegend=FALSE,
colourPalette=colourPalette,
oceanCol="white",
borderCol="grey",
missingCountryCol="white",
mapTitle="",#paste(indicator),
mapRegion=opts,
numCats=30)
colourPalette <- brewer.pal(20,"YlGnBu")
mapCountryData(sPDF,
nameColumnToPlot="Value",
addLegend=FALSE,
colourPalette=colourPalette,
oceanCol="white",
borderCol="grey",
missingCountryCol="white",
mapTitle="",#paste(indicator),
mapRegion=opts,
numCats=30)
colourPalette <- brewer.pal(20,"PuBu")
mapCountryData(sPDF,
nameColumnToPlot="Value",
addLegend=FALSE,
colourPalette=colourPalette,
oceanCol="white",
borderCol="grey",
missingCountryCol="white",
mapTitle="",#paste(indicator),
mapRegion=opts,
numCats=30)
colourPalette <- brewer.pal(9,"PuBu")
mapCountryData(sPDF,
nameColumnToPlot="Value",
addLegend=FALSE,
colourPalette=colourPalette,
oceanCol="white",
borderCol="grey",
missingCountryCol="white",
mapTitle="",#paste(indicator),
mapRegion=opts,
numCats=30)
colourPalette <- brewer.pal(9,"PuBu")
mapCountryData(sPDF,
nameColumnToPlot="Value",
addLegend=FALSE,
colourPalette=colourPalette,
oceanCol="white",
borderCol="grey",
missingCountryCol="white",
mapTitle="",#paste(indicator),
mapRegion=opts,
numCats=9)
colourPalette <- brewer.pal(9,"PuBu")
mapCountryData(sPDF,
nameColumnToPlot="Value",
addLegend=FALSE,
colourPalette=colourPalette,
oceanCol="white",
borderCol="grey",
missingCountryCol="white",
mapTitle="",#paste(indicator),
mapRegion=opts,
numCats=30)
